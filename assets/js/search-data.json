{
  
    
        "post0": {
            "title": "Se 1a",
            "content": "application season and pre-university . i applied to university like every other canadian kid born in 2002 around september of last year, filled out my OUAC application, spent a lot longer than i should have looking over my AIF, and finally finished the main part of all my university applications by early january, JIT for covid ü•≤. . thankfully covid didn‚Äôt have as much of an effect on my application (at least compared to everyone applying this fall). i remember that the CCC went on pretty much like normal and that the Euclid math contest was effectively cancelled, and i was able to finish off the rest of my courses by mid april. this meant that I got to have a 4.5-ish month summer vacation before starting university in the fall, which was the longest amount of free time that i‚Äôm probably going to have for a pretty long time, and while having all this free time was pretty fun at the beginning, eventually i got bored and started counting down the days to when school would start. I got my decision letters in early may (accepted to software engineering, rejected from CS), and enrolled into the software engineering program. . By early june-ish (i think), it was pretty obvious that covid really wasn‚Äôt going to go away any time soon and that our 1A term would be online (1B is also online), which meant that there was no way i was going to move to waterloo in the middle of a pandemic (covid miller hall üëÄ). . meeting the cohort . ok, so my whole experience over the last 4 months isn‚Äôt all doom-and-gloom, i honestly had a lot of really amazing times with my cohort which gave us a chance to get to know each other and feel a lot less isolated. in early may, i stumbled onto a discord server for software engineering 2025 students, which even in those early days was pretty active had a really nice vibe to it which is still there 8 months later. The biggest highlight of the software engineering program and the last 8-ish months in general was definitely the cohort system that gives you several dozen friends right as you start university (or in our case, 4 months before it even started). . through that server, i got to get to know a lot of really nice, funny, and all-around awesome people (you know who you are!). i‚Äôm not too sure about this since i don‚Äôt know a lot of people in my year who are in other programs, but our cohort really has developed this sense of community that i think really helped with the isolation of studying alone [INSERT CAPTION]. there‚Äôs this whole stereotype of waterloo students‚Äîespecially those in cs and engineering‚Äîthat i really haven‚Äôt felt like i experienced while in SE, but ymmv. . just to list a few of the things that my cohort did before school even started: there was a phase where we made a #social-media channel that ended up with everyone posting their github profiles, a couple of students organized a mini hackathon in june, we also hosted weekly game nights and video calls, as well as a movie night once (the frequency of these events dropped pretty quickly once school started), and i remember that there was this SE party that a bunch of people hosted during orientation week. . we also had a sticker+hoodie competition in june to design a software engineering class of ‚Äò25 sweater and had the hoodies shipped out by september, through softwears. idk about you, but imo our designs are pretty slick: [IMAGES]. . just to throw some shade on the cs first years, i saw a post on their discord in mid october saying that they still haven‚Äôt been able to choose a hoodie design ü•≤ . By the time school started in early september, i‚Äôm pretty sure only about 20-30 people in the cohort chose to move to waterloo, while the rest studied from home (same story for the winter tem). most of us are in the toronto/GTA area or elsewhere in ontario, but there are also groups of people studying from elsewhere in canada, quite a few international students studying across many timezones, as well as a few who took a gap year or entered university a few years early. . 1A . when september 8 finally rolled around i‚Äôm pretty sure that many people (including me) were looking forward to school starting if only to have something change. the first day of two of classes were interesting to say the least. since all our classes were online and asynchronous, with office hours twice a week replacing live lectures, we really didn‚Äôt have much of a ‚Äúschedule‚Äù that we could follow other than knowing when assignments are due. a lot of credit to making sure that we didn‚Äôt forget when assignments are due goes to the people who set up notion calendars and google docs with all the information scattered across all the different platforms that we had to use. going to the office hours in the first few days of class was a pretty unforgettable experience, from the non-stop pings from webex whenever someone joined the call to the chat section of every call looking like twitch. . rant time: it‚Äôs absolutely incredible how almost every prof and course uses a totally different set of online platforms for textbooks/course notes/assignments/quizzes/exams. Just to list out the ones that come to mind, we had learn, crowdmark, sapling, marmoset, the UW mobius, and the Nelson mobius, and many of these platforms were buggy, slow, and most importantly, $$$. . the courseload was also a really difficult thing for a lot of people to get to used to. we had 5 full courses and se101 which was a ‚Äúquarter-credit‚Äù course that was a bunch of short weekly activities and a term-long group project. i‚Äôve heard that in a normal year, we usually have an assignment or quiz due for each course every week, along with midterms and finals. in contrast, we had two (time consuming) assignments due every week for each course, as well as midterms and finals for two courses and 3 monthly ‚Äúterm tests‚Äù for the other two. the university decided to put more emphasis on assignments and quizzes while making exams shorter, unproctored, and open-book, in an effort to make cheating less of a concern. one pretty negative outcome of this was that we had to work on assignments for our other courses during our term test and midterm weeks. otoh, most of our exams were pretty low-stess. . i looked up the class profile for the software engineering class of 2020 and their attendance rate decreased over time from the low 90s in 1A to about 50% by 4B. i personally stopped going to pretty much any synchronous office hour or tutorial after the first one or two weeks of class since it really wasn‚Äôt worth spending the time there when i could be working on an assignment instead‚Äîi know that a pretty large portion of the class skipped most of their classes, so our attendance graph is going to look very weird when we make our class profile in a few years. . math 115 . math 115 was our linear algebra course, and was for many of us, our favorite and most well-delivered course (big props to the profs for co-ordinating the course really well). the assignments were pretty well made and challenging while not being impossible or ambigously worded, and the course notes were very well made‚Äîlatex notes for each chapter that were good enough that you could self-study everything you needed from them. also, our prof for this course was really good even though this was his first time teaching at uw (and he‚Äôd usually bring his cat to office hours). . math 135 . math 135 was our mathematical proofs course where you finish the course by using everything you have learned so far to implement and prove the RSA encryption algorithm. the course notes for this course were also very well made just like math 115. 135 was definitely the toughest course we had this term when it came to the material and assignments being pretty challenging. our cohort was split across a couple of different sections of this course so we all had different profs (my section‚Äôs prof played music in the background during office hours, which was a definite plus). overall i kinda enjoyed this course in a way. . math 117 . math 117 was our calculus 1 course and on paper should have been easy for anyone who took AP or IB calculus in high school, but the assignments were tough enough to make sure that you really understood the material. again, the course notes for this course were pretty good and it was an ok course, it would have been nice if you could get them as a pdf, but w/e. right after the midterm, a lot of people stayed up until 12am to wait for the 24 hour exam period to end and to see their marks on the mcq part of the exam, which weren‚Äôt actually released until a few days later. this lead to a sort of funny situation where someone started a chant of ‚Äúwhen grade‚Äù in a channel, which eventually got reposted to piazza and lead to a pretty hilarious response from the instructors. . cs 137 . cs 137 was our intro to CS course. it was probably the easiest course of the term for a lot of people since we only had one assignment and quiz due every week and no midterm. the quizzes and assignments were pretty easy in comparison to our other math courses (some people speedran through their quizzes in under a minute) the course notes for this course on the other hand, were unfortunately really terrible‚Äîlooking like they were hastily put together in ms word with very little thought, bad formatting, multiple errors, sometimes blurry screenshots of code examples with messily drawn arrows in what looked like ms paint, and bad explanations. you expect a university-level cs course, especially one at a university that is mostly known for its cs department, to be of a certain minimum quality and to at least have some amount of effort into making the course notes presentable, but cs137 unfortunately did not meet that level in my opinion. . se 101 . se 101 is a quarter credit course that is supposed to teach you the more practical aspects of software development. we started off with this cool spaceship group project where you learn how to use git through powerpuff girl memes and have the SE program director‚Äôs children crash the teams call to talk about minecraft. then, you work with 16 other people to work on controlling different parts of a spaceship inside the Godot (imagine my surprise that it‚Äôs pronouced go-doh and not go-dot) game engine. the whole project was pretty buggy since godot didn‚Äôt play well with a lot of people‚Äôs computers but it was a fun way to get to some of the people in the cohort. the remainder of the course was a series of short weekly activities that you work on with a rotating group of people, and a term long project where you build something in a group of 5. . i was very lucky to be able to team up with 3 other awesome team members and we were able to pretty successfully make a project remotely and without most of our team having access to the hardware while balancing all of our other courses. [video]. I had a lot of fun filming [this] part of our demo video, even if i ended up cutting it from the final cut of the video. . ece 105 . ah now to our final course: ece 105 classical mechanics. so this course has a sort of reputation of being the one course that everyone in the se or ece programs dreads, and imo it is very well deserved because a lot of things went wrong with this course. . we had weekly assignments that all together counted for 20% of our final on the nelson mobius which originally were pretty buggy since the formatting of the questions as well as how you had to enter in your answers was pretty finnicky. to fix this, prof mansour turned on the ‚Äúhow did i do‚Äù feature (for what i assume was temporarily while the bugs were ironed out) for almost every question on every assignment, telling you in real time whether or not your answer was correct as well as a fully worked out solution and final answer. Essentially, we got 20% of our course‚Äôs final grade for free. Also the questions on all our weekly quizzes were pretty ambigously worded and felt rushed‚Äîthere was one time where i counted 6 pretty badly misspelled words in a single 2-3 line question (‚Äúfricitonal‚Äù, ‚Äúbackwrards‚Äù, ‚Äúcourterclockwiese‚Äù). on top of this, we were originally randomly given different versions of the quizzes which were of very different difficulties (the avg for one was 80% vs 30% for the other). [EXAM WEIGHTING] on a lighter note, the whole first year experience wouldn‚Äôt be complete without listening to mansour‚Äôs stories, the ‚Äúwar story firecrackers‚Äù one is hard to beat. . :blobheart: . outside of studying, i‚Äôve managed to have a good time with my cohort. here‚Äôs a short-ish list of things that i remember that we did: . somewhat daily cat pics in #cute-animals (now #tasty-animals) | a lot of people, me included, taking discord‚Äôs halloween themed trick‚Äôcord treat bot way too seriously and competitively enough that there would be times where the server would be very quiet for a long time at 12am and a bot would drop a new treat and you‚Äôd see four or five people all type out h!trick and send it out in under a second. | continuing from ^, we were so obsessed with it a lot of people (you know who you are) were still playing during our 24 hour exam periods instead of studying. | making a bot that lists out our piles of upcoming assignments and responding with ‚Äúthat‚Äôs rough, buddy‚Äù | late night chats at 2am while working on assignments that are due in the morning | talking in french because ??? | birthday countdowns | updating discord statuses every day | live discussion of that debate and countless messages of ‚Äúoh he‚Äôs only X votes behind now‚Äù | #quotes with a lot of material that is not fit to be published here | .",
            "url": "https://bkkaggle.github.io/blog/2020/12/07/se-1a.html",
            "relUrl": "/2020/12/07/se-1a.html",
            "date": " ‚Ä¢ Dec 7, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Bilal Khans Of Google",
            "content": "",
            "url": "https://bkkaggle.github.io/blog/2020/12/07/bilal-khans-of-google.html",
            "relUrl": "/2020/12/07/bilal-khans-of-google.html",
            "date": " ‚Ä¢ Dec 7, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Rust Async",
            "content": ". Some definitions . . green threads: threads scheduled by vm or runtime | native threads are scheduled by os | runtime: the env where your code runs and the libraries it has access to (e.g. jvm, stdlib, malloc). | . . Why use async over OS-provided threads . . native threads are expensive | the async runtime creates its own green threads from the os/kernel and schedules access to them | it handles keeping track of the state of async functions | . ‚ÄúIt is registering incoming Future requests and saves a pointer to the async function handler. It then triggers an event in the kernel. Once the I/O operation is done, we call the pointer and execute the async method with the results from the I/O (kernel). For this, we need a Reactor, which notifies if data is coming over the network or a file writing operation is in progress, and an executor which takes this data and executes the async function (Future) with it.‚Äù . . https://manishearth.github.io/blog/2018/01/10/whats-tokio-and-async-io-all-about/ (outdated?) | . ‚ÄúYou can wait() on a Future, which will block until you have a result, and you can also poll() it, asking it if it‚Äôs done yet (it will give you the result if it is).‚Äù . ‚ÄúYou have to manually set up the Tokio event loop (the ‚Äúscheduler‚Äù), but once you do you can feed it tasks which intermittently do I/O, and the event loop takes care of swapping over to a new task when one is blocked on I/O‚Äù . Resouces . https://manishearth.github.io/blog/2018/01/10/whats-tokio-and-async-io-all-about/ | https://rust-lang.github.io/async-book/01_getting_started/01_chapter.html | https://levelup.gitconnected.com/explained-how-does-async-work-in-rust-c406f411b2e2 | https://softwareengineering.stackexchange.com/questions/304427/what-really-is-the-runtime-environment | https://areweasyncyet.rs/ | http://www.arewewebyet.org/ | https://tokio.rs/ | .",
            "url": "https://bkkaggle.github.io/blog/rust/2020/08/14/rust-async.html",
            "relUrl": "/rust/2020/08/14/rust-async.html",
            "date": " ‚Ä¢ Aug 14, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Adafactor",
            "content": ". Purpose . . The purpose of these series of blog posts is to be a place to store my (still in-progress!) notes about topics in machine learning, help me keep track of everything I‚Äôve learned over the last three years, and to practice my Latex skills. . This is my fifth blog post in the series, and this time I‚Äôm taking some notes on the Adafactor optimization paper . . Adam default hyperparmeters . . $ beta_1 = 0.9$ | $ beta_2 = 0.999$ | linear warmup + inv sqrt decay . | The default/initial lr for most experiments (the ones with a step size of $a_t = 0.1 * s_t$) is $1e-3$. | The authors use an inverse sqrt learning rate decay schedule for all experiments . | warmup helps but not 100% necessary | . . Adafactor . . Arxiv: https://arxiv.org/abs/1804.04235 | . Adafactor factorizes the second moment running averages of the gradient into row and column vectors. The matrix is then ‚Äúdivided by the sum of all entries‚Äù in the matrix to approximate the original matrix (Section 3) . By default, Adafactor doesn‚Äôt work if you don‚Äôt use a learning rate warmup. The authors tried using either only the row or column running averages. Using only the row running averages works almost just as well, but using only the column running averages doesn‚Äôt work at all. . Note: check if you can get away with only using row means without warmup. . Also, most of the Adafactor benchmarks in the paper were done with $ beta_1 = 0$, but IIRC some pretraining papers use it (?). . . The problem with Adam/Adafactor (section 5) . . Adam without $ beta_1$ works almost just as well as the original Adam implementation and it saves you quite a bit of memory. Note that this only holds true when you‚Äôre using a linear warmup with it. The problem is that using a fast ($0.9$) $ beta_2$ leads to Adam not converging no matter what, while using a slow ($0.999$) $ beta_2$ leads to your model only training well if you also use warmup_. . You either need a $ beta_1$ of $0.9$ or warmup with a $ beta_2$ of $0.999$. . Here‚Äôs why: Using a slow $ beta_2$ means that second moment information is updated very slowly, leading to the current value of the running average matrix be out of date (this is shown in section 6, figure 1). . How do we fix this? . Well, the authors outline a few ways on how to do so‚Ä¶ . . 1. Gradient clipping (section 6) . . Having an out of date second moment estimator means that the raw gradient updates are often larger than they should be. A simple way to fix this would be to just scale down the magnitude of the update if it is larger than a particular ‚Äúclipping‚Äù value. Empirically, update clipping works well when training without warmup but doesn‚Äôt match the original‚Äôs performance. The authors show that clipping at $1$ works well with both Adam and Adafactor. . This is referred to in the paper as clipping, which it technically is, but acts more like gradient scaling since you‚Äôre really only scaling down the magnitude of the gradient update when it passes a particular ‚Äúclipping‚Äù threshold. . . 2. Gradually increasing $ beta_2$ . . Add a schedule ($1 - t ^ {- x}$) that gradually increases the $ beta_2$ from $0$ to $1$. The quality of the results for when you‚Äôre training without warmup are very dependent on the value of $x$ that you choose. It seems like it stabilizes when you use this with update clipping, but the end result of using a $ beta_2$ schedule + update clipping is really no better than just update clipping. . Does this mean that a $ beta_2$ schedule is practically useless? . . 3. Relative update size . . Instead of hardcoded learning rate, multiply the gradient update by ‚Äúthe root-mean-square of its components, lower-bounded by a small constant 2‚Äù. In equation form (taken from Section 9, algorithm 4), it‚Äôs . œµ2=1e‚àí3 epsilon_2 = 1e-3œµ2‚Äã=1e‚àí3 . pt=max‚Å°(œµ2,RMS(Xt‚àí1))p_t = max( epsilon_2, RMS(X_{t - 1}))pt‚Äã=max(œµ2‚Äã,RMS(Xt‚àí1‚Äã)) . In practice, the authors combine this with $ beta_2$ scheduling and update clipping. . It would be nice to see how the relative update size method performs by itself without the scheduler or update clipping but ü§∑‚Äç‚ôÇÔ∏è . The authors try adding a $ beta_1$ of $0.9$, but that actually makes the results slightly worse. . . Conclusion . . Most codebases that I‚Äôve seen (this includes all of mine too!) use the Adafactor optimizer don‚Äôt use it the way that the authors reccommend to use it in their paper. It‚Äôs pretty common to see people use Adafactor without a $ beta_1$, without the $ beta_2$ decay schedule, and with a simple linear warmup and decay. . For my future self looking back at this post to figure out what hyperparmeters they should use for Adafactor (or anyone else who‚Äôs reading this), here‚Äôs a summary for what hyperparameters to use with Adafactor: . no warmup | no $ beta_1$ | Adafactor‚Äôs built-in inv sqrt lr decay | update clipping at $1.0$ | Relative update step sizes instead of a fixed learning rate | .",
            "url": "https://bkkaggle.github.io/blog/notes/2020/08/09/adafactor.html",
            "relUrl": "/notes/2020/08/09/adafactor.html",
            "date": " ‚Ä¢ Aug 9, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Writing A Machine Learning Library In Rust",
            "content": ". &lt;/img&gt; . . . Tl;dr . . This blog post shows you, step-by-step, how to build a fast PyTorch-style machine learning library in the Rust programming language. This blog post is based on a library called L2 that I finished working on a while ago. . I compiled quite a long list of blog posts, articles, and GitHub repos that I found useful when I was working on L2, so take a look at that if that‚Äôs the type of stuff you‚Äôre interested in. . . Disclaimers: . L2 is a small project I was working on during the summer before uni for fun 1, so don‚Äôt expect it to be production-ready or bug-free. 2 . I‚Äôm going to assume that everyone who‚Äôs reading this knows or uses Rust relatively well and is familiar with how PyTorch and TF work at a high level. If you want to learn about these topics or just brush up on some things that you aren‚Äôt üíØ clear on, try looking through my resources section. . L2 is surprisingly fast especially since I didn‚Äôt try very hard to optimize all the operators, it‚Äôs usually only less than one order of magnitude slower than PyTorch in most of the benchmarks that I ran. L2 only supports a CPU backend at the moment since I‚Äôm not familiar enough with Rust to start working with CUDA and cuDNN. So far, it doesn‚Äôt have any PyTorch-style high level abstractions that are really useful for machine learning like PyTorch‚Äôs Parameter, Layer, or Module classes. There might still be some bugs in the transpose operators and calling .backward() on broadcasted tensors. The autograd system won‚Äôt automatically clear unused buffers once they‚Äôve been used so this won‚Äôt be as memory efficient as PyTorch. . I wrote dozens of tests and benchmarks to make sure that L2 was working properly when I was developing it. I‚Äôm going to be omitting tests in this blog post and instead just going to show some example code in src/bin/main.rs. . If you just want to skip to the code part of the tutorial, click here . Background . . Last summer 3, I wrote a machine learning library as a way of getting better at using C++. The library wasn‚Äôt really that advanced (I didn‚Äôt have an autograd system like PyTorch does, instead I just did the backprop calculations by hand for each layer) or very fast (I pretty much passed everything by value and didn‚Äôt really put a focus on making my code fast and performant), but it was a good way at getting a lot of experience working with a lower level language like c++ that I‚Äôd never used before and I learned a lot about how machine learning libraries like Pytorch and Tensorflow work behind the scenes. . This summer, I did a complete rewrite of L2, this time in Rust, with a focus on making it as close to Pytorch as I could (speed and feature wise) and got to learn about and implement a lot of interesting and cool features that are used in all the popular machine learning libraries today. . I‚Äôm pretty satisfied with how L2 turned out, here‚Äôs the pitch I wrote for it on my GitHub repo: . L2 is a Pytorch-style Tensor+Autograd library written in Rust. It contains a multidimensional array class, Tensor, with support for strided arrays, numpy-style array slicing, broadcasting, and most major math operations (including fast, BLAS-accelerated matrix multiplication!). On top of this, L2 has a built-in efficient graph-based autograd engine that keeps track of all operations performed on a tensor and topologically sorts and traverses the graph to compute the gradients. . I‚Äôm also pretty happy with how the user-facing API of the library turned out: . . use l2::tensor::*; let x: Tensor = Tensor::normal(&amp;[2, 4], 0.0, 1.0)?; let y: Tensor = Tensor::normal(&amp;[4, 1], 0.0, 1.0)?; let z: Tensor = l2::matmul(&amp;x, &amp;y)?; z.backward(); println!(&quot;{}&quot;, z); . . Let‚Äôs get started . . So let‚Äôs get started. I‚Äôm pretty much just copying down the installation instructions from the official get started guide, so take a look at that if you want. . Install rustup to your computer: . . bilal@Bilals-MacBook-Pro ~ % curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh . . Switch the default rust version to nightly: . . bilal@Bilals-MacBook-Pro ~ % rustup default nightly . . I‚Äôll be using my preferred text editor VScode in this post, but feel free to use whatever editor you prefer. . I highly recommend using the (soon to become) official Rust extension for VScode, Rust-analyzer instead of the old RLS extension. Just install it from the marketplace and you should be ready to go. . Create a new Rust library called l2 with: . . bilal@Bilals-MacBook-Pro ~ % cargo new l2 --lib . . Install clippy (Rust‚Äôs official linter): . You can take a look at all the lint rules and how to fix each one here . . bilal@Bilals-MacBook-Pro ~ % rustup component add clippy . . And change rust-analyzer to use clippy as its default linter by creating a .vscode/settings.json file and pasting this in it. . . { &quot;rust-analyzer.checkOnSave.command&quot;: &quot;clippy&quot; } . . For debugging support, I use the Code-LLDB extension, so install that as well. . create a .vscode/launch.json file and paste this into it: . . { &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ { &quot;type&quot;: &quot;lldb&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;name&quot;: &quot;Debug&quot;, &quot;program&quot;: &quot;${workspaceRoot}/target/debug/main&quot;, &quot;args&quot;: [], &quot;cwd&quot;: &quot;${workspaceRoot}&quot; } ] } . . Add a rust binary target src/bin/main.rs that will be linked against our library at src/lib.rs. Your project should now have a directory structure like this: . . .git/ .vscode/ settings.json launch.json src/ bin/ main.rs lib.rs target/ .gitignore Cargo.lock Cargo.toml . . We‚Äôll code up the library in src/lib.rs and any other files in the src/ directory. We‚Äôll use src/bin/main.rs to interact with L2 as you would when using it in your own project. . . A simple baseline . . Ok, so let‚Äôs start by creating a simple Tensor struct and defining a few simple operations on it. . A Tensor is really just a multidimensional array. For this library, we‚Äôll keep it simple and restrict tensors to have at most $2$ dimensions (You‚Äôll see why later). . The simplest way to store a multidimensional array of say, dimensions $m times n$ would be to create an array of length $m$ that holds a pointers to $m$ distinct arrays of length $n$, each holding the elements of a single row. This would be the simplest way to represent a Tensor but isn‚Äôt really optimal when you need to create and process large Tensors quickly. . Most (if not all) people use strided arrays, where elements of a multidimensional array are layed out contigously in memory (the $m times n$ Tensor would then be represented as single array of length $m * n$). . Take a look at http://blog.ezyang.com/2019/05/pytorch-internals/ for a good in-depth look into how PyTorch uses strided arrays. I‚Äôll summarize the main parts below: . Say you have a $2 times 2$ Tensor like this: . [1234] begin{bmatrix} 1 &amp; 2 3 &amp; 4 end{bmatrix}[13‚Äã24‚Äã] . If you wanted to represent this as a strided array, you could either store them in row-major or column-major order, storing either values from a single row or column contigously in memory (the same idea would still apply if you have a Tensor of more dimensions): . row-major:[1,2,3,4] text {row-major:} begin{bmatrix} 1, 2, 3, 4 end{bmatrix}row-major:[1,2,3,4‚Äã] . column-major:[1,3,2,4] text {column-major:} begin{bmatrix} 1, 3, 2, 4 end{bmatrix}column-major:[1,3,2,4‚Äã] . Most machine learning libraries like Numpy, PyTorch, and Tensorflow store Tensors in row-major order by default. This lets you quickly access the next element in the same row just by moving one element to the right in the Tensor. Column-major order isn‚Äôt as commonly used, the only time I had to use it when I was integrating a BLAS library written in very optimized Fortran into L2 in order to use its super fast matrix multiplication implementations (using BLAS sped up my matrix multiplication code by about 200 times IIRC). . The choice of whether to store your data in column-major or row-major order depends on whether you prefer to have contigous access to elements in the first or last dimensions of your Tensor. For example, if you store a batch of $N$ three-channel image in a Tensor of dimensions ($256$, $256$, $3$), you would be able to either access the channels or the batch dimension contigously (i.e. have the elements in that dimension be next to each other in memory) depending on whether it‚Äôs stored in row-major or column-major order. . The stride for each dimension of a strided array is the number of elements you want to skip between neighboring elements of a Tensor in a particular dimension. For example, our original Tensor of shape $ begin{bmatrix} 2, 2 end{bmatrix}$ has strides of $ begin{bmatrix} 2, 1 end{bmatrix}$. . This means that if we want to advance one element in the column dimension (from the element $1$ to the element $3$) of the logical Tensor, we need to advance $2$ elements at a time in the strided Tensor. . Logical¬†Tensor:[1234] text {Logical Tensor:} . begin{bmatrix} 1 &amp; color{gray} 2 3 &amp; color{gray} 4 end{bmatrix}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;Logical¬†Tensor:[13‚Äã24‚Äã]&lt;/span&gt;&lt;/span&gt; . Strided¬†Tensor:[1,2,3,4] text {Strided Tensor:} begin{bmatrix} 1, color{gray} 2, color{white} 3, color{gray} 4 end{bmatrix}Strided¬†Tensor:[1,2,3,4‚Äã] . The same would be true for the other dimensions as well. If we want to advance one element in the row dimension (from the element $1$ to the element $2$) of the logical Tensor, we would advance $1$ element in the strided Tensor. . Logical¬†Tensor:[1234] text {Logical Tensor:} . begin{bmatrix} 1 &amp; 2 color{gray} 3 &amp; color{gray} 4 end{bmatrix}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;Logical¬†Tensor:[13‚Äã24‚Äã]&lt;/span&gt;&lt;/span&gt; . Strided¬†Tensor:[1,2,3,4] text {Strided Tensor:} begin{bmatrix} 1, 2, color{gray} 3, 4 end{bmatrix}Strided¬†Tensor:[1,2,3,4‚Äã] . If we wanted to get the physical location in memory of a specific element in the Tensor from the logical location, we can simply ‚Äúmultiply each index with the respective stride for that dimension, and sum them all together‚Äù 4. So for an example, if we want to get the physical index of the element at the logical indices $[ 1, 1]$, we would calculate it like this: . logical¬†index:¬†[1,1]¬†strides:¬†[2,1] text{logical index: } [ color{red} 1, color{blue} 1 color{white}] text{strides: } [ color{red} 2, color{blue} 1 color{white}]logical¬†index:¬†[1,1]¬†strides:¬†[2,1] . . physical¬†index=1‚àó1+1‚àó2 text{physical index} = { color{blue} 1} { color{white} *} { color{blue} 1} { color{white} +} { color{red} 1} { color{white} *} { color{red} 2}physical¬†index=1‚àó1+1‚àó2 . physical¬†index=1+2=3 text{physical index} = 1 + 2 = 3physical¬†index=1+2=3 . element¬†at¬†[1,¬†1]=[1,2,3,4] text {element at [1, 1]} = begin{bmatrix} color{gray} 1, 2, 3, color{white} 4 end{bmatrix}element¬†at¬†[1,¬†1]=[1,2,3,4‚Äã] . . So now that we have that out of the way, let‚Äôs start writing some code. . In this section, we‚Äôll make a basic Tensor struct the just creates and stores a strided array. We‚Äôll also take advantage of Rust‚Äôs excellent error handling primitives to add robust error handling and add pretty printing of our Tensors. . Let‚Äôs make a new file at src/tensor.rs to house our Tensor struct. . . use crate::errors::TensorError; use std::fmt; #[derive(Debug, PartialEq)] pub struct Tensor { pub data: Vec&lt;f32&gt;, pub shape: Vec&lt;usize&gt;, pub strides: Vec&lt;usize&gt;, } // Pretty print Tensors impl fmt::Display for Tensor { fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result { let graph = format!(&quot;Value: {:?} nShape: {:?}&quot;, self.data, self.shape); write!(f, &quot;{}&quot;, graph) } } impl&lt;&#39;a&gt; Clone for Tensor&lt;&#39;a&gt; { fn clone(&amp;self) -&gt; Self { Tensor::new(self.data.clone(), &amp;self.shape).unwrap() } } impl Tensor { // Calculate the number of elements in a tensor from the shape fn calc_tensor_len_from_shape(shape: &amp;[usize]) -&gt; usize { let mut length = 1; for i in shape { length *= i; } length } // calculate the strides for each dimension from the shape fn calc_strides_from_shape(shape: &amp;[usize]) -&gt; Vec&lt;usize&gt; { let mut strides = Vec::with_capacity(shape.len()); let mut current_stride = 1; for i in shape.iter().rev() { strides.insert(0, current_stride); current_stride *= i; } strides } // Create a new tensor from some data with a specific shape pub fn new(data: Vec&lt;f32&gt;, shape: &amp;[usize]) -&gt; Result&lt;Tensor, TensorError&gt; { if data.len() == Tensor::calc_tensor_len_from_shape(shape) &amp;&amp; !shape.is_empty() &amp;&amp; shape.len() &lt; 3 { Ok(Tensor { data, shape: shape.to_vec(), strides: Tensor::calc_strides_from_shape(shape), }) } else { Err(TensorError::InvalidTensor) } } } . . Let‚Äôs add the error handling struct TensorError to src/errors.rs . . // src/errors.rs use std::error; use std::fmt; #[derive(Debug, Clone)] pub enum TensorError { MaxDimsError, InvalidTensor, } impl fmt::Display for TensorError { fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result { match self { TensorError::MaxDimsError =&gt; write!( f, &quot;L2 currently only supports tensors with up to 2 dimensions&quot; ), TensorError::InvalidTensor =&gt; write!(f, &quot;Invalid parameters for Tensor&quot;), } } } // This is important for other errors to wrap this one. impl error::Error for TensorError { fn source(&amp;self) -&gt; Option&lt;&amp;(dyn error::Error + &#39;static)&gt; { // Generic error, underlying cause isn&#39;t tracked. None } } . . Add the relevant imports to src/lib.rs and src/bin/main.rs . . // src/lib.rs pub mod errors; pub mod tensor; . . And finally, lets test out our library by creating a simple Tensor in src/bin/main.rs . . // src/bin/main.rs use l2::errors::*; use l2::tensor::*; fn main() -&gt; Result&lt;(), TensorError&gt; { let x = Tensor::new(vec![1.0, 2.0, 3.0], &amp;[3])?; println!(&quot;{}&quot;, x); Ok(()) } . . and run cargo run to see the output. . . bilal@Bilals-MacBook-Pro l2 % cargo run Compiling l2 v0.1.0 (/Users/bilal/Desktop/l2) Finished dev [unoptimized + debuginfo] target(s) in 1.02s Running `target/debug/main` Value: [1.0, 2.0, 3.0] Shape: [3] . . üéâ! you now have a very simple machine learning library. Now that we have the general structure of the library set up, I&#39;ll be speeding up the pace of this blog post. . . Broadcasting . . Storing a bunch of values in a Tensor is useless if we can‚Äôt operate over them. . Before we can create some Tensor‚ÄîTensor operations, we need to implement broadcasting. I won‚Äôt go into what exactly broadcasting is here, since there are a lot of better explanations out there. Numpy‚Äôs documentation on their broadcasting rules is a good technical explanation. . One thing the numpy docs don‚Äôt go into is how to implement broadcasting. I struggled with how to best implement it when I was making my original C++ version of the library last year 5, but I eventually settled on the pretty simple and efficient solution of adding dimensions of size $1$ to the tensor with the fewer number of dimensions to make their shapes broadcastable, then setting the shapes and strides of a broadcasted dimension to $1$ and $0$ respectively. By doing it this way, the Tensor would use the same value across all values of a specific dimension. . . // src/tensor.rs impl Tensor { ... #[allow(clippy::ptr_arg, clippy::type_complexity)] fn broadcast( lhs_shape: &amp;Vec&lt;usize&gt;, rhs_shape: &amp;Vec&lt;usize&gt;, ) -&gt; Result&lt;(Vec&lt;usize&gt;, Vec&lt;usize&gt;, Vec&lt;usize&gt;), TensorError&gt; { // prepend lhs_shape with ones if the length of it is smaller than rhs_shape let lhs_shape = if lhs_shape.len() &lt; rhs_shape.len() { let ones = vec![1; rhs_shape.len() - lhs_shape.len()]; [&amp;ones[..], &amp;lhs_shape[..]].concat() } else { lhs_shape.clone() }; // prepend rhs_shape with ones if the length of it is smaller than lhs_shape let rhs_shape = if rhs_shape.len() &lt; lhs_shape.len() { let ones = vec![1; lhs_shape.len() - rhs_shape.len()]; [&amp;ones[..], &amp;rhs_shape[..]].concat() } else { rhs_shape.clone() }; let mut broadcasted_shape: Vec&lt;usize&gt; = Vec::with_capacity(lhs_shape.len()); let mut broadcasted_lhs_strides: Vec&lt;usize&gt; = Tensor::calc_strides_from_shape(&amp;lhs_shape); let mut broadcasted_rhs_strides: Vec&lt;usize&gt; = Tensor::calc_strides_from_shape(&amp;rhs_shape); // go over each dimension of lhs and rhs for (i, (&amp;lhs, &amp;rhs)) in lhs_shape.iter() .zip(rhs_shape.iter()).enumerate() { // if both dimensions are the same, // the dimension of the broadcasted shape // for this dimension doesn&#39;t change if lhs == rhs { broadcasted_shape.push(lhs); // if the size of this dimension of lhs // is 1, set the strides of lhs for that // dimension to 0 } else if lhs == 1 { broadcasted_shape.push(rhs); broadcasted_lhs_strides[i] = 0; // if the size of this dimension of rhs // is 1, set the strides of rhs for // that dimension to 0 } else if rhs == 1 { broadcasted_shape.push(lhs); broadcasted_rhs_strides[i] = 0; // return an error if the tensors // aren&#39;t broadcastable } else { return Err(TensorError::BroadcastError); } } Ok(( broadcasted_shape, broadcasted_lhs_strides, broadcasted_rhs_strides, )) } . // src/errors.rs pub enum TensorError { ... BroadcastError, } impl fmt::Display for TensorError { fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result { match self { ... TensorError::BroadcastError =&gt; write!(f, &quot;Shapes are not broadcastable&quot;), } } } . . Now that we‚Äôve implemented broadcasting, we‚Äôll add some operations over Tensors in the next section so we can try it out. . . Ops . . Let‚Äôs start by defining a struct Ops that we‚Äôll use to keep track of what operation should be performed on a tensor. . We‚Äôll be storing the Tensor‚ÄîTensor ops in an enum called TensorOp, but we‚Äôll wrap that in the Ops enum so we can add more different kinds of ops in the future (slicing, matmuls, transposes, etc). . . // src/ops.rs use std::fmt; #[derive(Debug, PartialEq)] pub enum TensorOp { Add, Sub, Mul, Div, } impl fmt::Display for TensorOp { fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;&#39;_&gt;) -&gt; fmt::Result { match self { TensorOp::Add =&gt; write!(f, &quot;Add&quot;), TensorOp::Sub =&gt; write!(f, &quot;Subtract&quot;), TensorOp::Mul =&gt; write!(f, &quot;Multiply&quot;), TensorOp::Div =&gt; write!(f, &quot;Divide&quot;), } } } #[derive(Debug, PartialEq)] pub enum Ops { TensorOp(TensorOp), } impl fmt::Display for Ops { fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;&#39;_&gt;) -&gt; fmt::Result { match self { Ops::TensorOp(tensor_op) =&gt; write!(f, &quot;{}&quot;, tensor_op), } } } . . And now let‚Äôs add an OpError variant to our TensorError enum . . // src/errors.rs pub enum TensorError { ... OpError, } impl fmt::Display for TensorError { fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result { match self { ... TensorError::OpError =&gt; write!(f, &quot;Tensors cannot be operated on&quot;), } } } . . Now that we have an Ops enum that we can use, let‚Äôs integrate it into Tensor . . // src/tensor.rs use std::ops::{Add, Div, Mul, Sub}; use crate::ops::{Ops, TensorOp}; impl Tensor { ... // calculate the physical index of an element // from a `Tensor`&#39;s logical indices and strides fn get_physical_idx(logical_indices: &amp;[usize], strides: &amp;[usize]) -&gt; usize { let mut physical_idx = 0; for (i, idx) in logical_indices.iter().enumerate() { physical_idx += idx * strides[i]; } physical_idx } // perform op on lhs and rhs fn op(lhs: &amp;f32, rhs: &amp;f32, op: &amp;Ops) -&gt; Result&lt;f32, TensorError&gt; { match op { Ops::TensorOp(TensorOp::Add) =&gt; Ok(lhs + rhs), Ops::TensorOp(TensorOp::Sub) =&gt; Ok(lhs - rhs), Ops::TensorOp(TensorOp::Mul) =&gt; Ok(lhs * rhs), Ops::TensorOp(TensorOp::Div) =&gt; Ok(lhs / rhs), _ =&gt; Err(TensorError::OpError), } } fn tensor_op(&amp;self, other: &amp;Tensor, op: Ops) -&gt; Result&lt;Tensor, TensorError&gt; { // broadcast tensors let (new_shape, lhs_strides, rhs_strides) = Tensor::broadcast(&amp;self.shape, &amp;other.shape)?; if new_shape.is_empty() || (new_shape.len() &gt; 3) { return Err(TensorError::MaxDimsError); } // allocate a new vector for the result of the op let mut new_data: Vec&lt;f32&gt; = Vec::with_capacity(Tensor:: calc_tensor_len_from_shape(&amp;new_shape)); // call `Tensor::op()` on each element in the tensor for i in 0..new_shape[0] { if new_shape.len() == 1 { let op_result = Tensor::op( &amp;self.data[Tensor:: get_physical_idx(&amp;[i], &amp;lhs_strides)], &amp;other.data[Tensor:: get_physical_idx(&amp;[i], &amp;rhs_strides)], &amp;op, )?; new_data.push(op_result); } else { for j in 0..new_shape[1] { let op_result = Tensor::op( &amp;self.data[Tensor:: get_physical_idx(&amp;[i, j], &amp;lhs_strides)], &amp;other.data[Tensor:: get_physical_idx(&amp;[i, j], &amp;rhs_strides)], &amp;op, )?; new_data.push(op_result); } } } Tensor::new(new_data, &amp;new_shape) } } . . Let‚Äôs also overload Rust‚Äôs built-in Add, Sub, Mul, and Div traits for Tensor so we can use the native plus and minus operators on Tensors: let c: Tensor = a + b; . . // src/tensor.rs ... impl Add for &amp;Tensor { type Output = Tensor; fn add(self, other: &amp;Tensor) -&gt; Tensor { match self.tensor_op(other, Ops::TensorOp(TensorOp::Add)) { Ok(t) =&gt; t, Err(e) =&gt; panic!(&quot;{}&quot;, e), } } } impl Sub for &amp;Tensor { type Output = Tensor; fn sub(self, other: &amp;Tensor) -&gt; Tensor { match self.tensor_op(other, Ops::TensorOp(TensorOp::Sub)) { Ok(t) =&gt; t, Err(e) =&gt; panic!(&quot;{}&quot;, e), } } } impl Mul for &amp;Tensor { type Output = Tensor; fn mul(self, other: &amp;Tensor) -&gt; Tensor { match self.tensor_op(other, Ops::TensorOp(TensorOp::Mul)) { Ok(t) =&gt; t, Err(e) =&gt; panic!(&quot;{}&quot;, e), } } } impl Div for &amp;Tensor { type Output = Tensor; fn div(self, other: &amp;Tensor) -&gt; Tensor { match self.tensor_op(other, Ops::TensorOp(TensorOp::Div)) { Ok(t) =&gt; t, Err(e) =&gt; panic!(&quot;{}&quot;, e), } } } . . Now that we have the ops implemented, all we need to do now is to add ops.rs as a module in lib.rs . . // src/lib.rs mod ops; . . and let‚Äôs try it out: . . // src/bin/main.rs fn main() -&gt; Result&lt;(), TensorError&gt; { let a = Tensor::new(vec![1.0, 2.0, 3.0], &amp;[1, 3])?; let b = Tensor::new(vec![1.0, 2.0, 3.0], &amp;[3])?; let c = &amp;a * &amp;b; println!(&quot;{}&quot;, c); ... . . Just run cargo run in your terminal to see the results: . . bilal@Bilals-MacBook-Pro l2 % cargo run Finished dev [unoptimized + debuginfo] target(s) in 0.75s Running `target/debug/main` Value: [1.0, 4.0, 9.0] Shape: [1, 3] . . Autograd . . We need to implement one more operator before we can start working on our autograd system: .pow() . . // src/ops.rs #[derive(Debug, PartialEq)] pub enum Ops { ... Pow(f32), } impl fmt::Display for Ops { fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;&#39;_&gt;) -&gt; fmt::Result { match self { ... Ops::Pow(pow) =&gt; write!(f, &quot;Pow: {}&quot;, pow), } } } . // src/tensor.rs impl Tensor { ... pub fn pow(&amp;self, exp: f32) -&gt; Result&lt;Tensor, TensorError&gt; { let new_data = self.data.iter() .map(|val| val.powf(exp)).collect(); Tensor::new(new_data, &amp;self.shape) } } . . Now that that‚Äôs out of the way, lets go on to the fun stuff: Autograd. We‚Äôll be implementing a simple but efficient graph based autograd system similar to what PyTorch uses. . Every Tensor struct will hold field(s) that hold references to its parent(s) as well as a field holding the op that was used to create it and a Vec&lt;f32&gt; to store its gradient. . Since we‚Äôre using Rust, a language famous for its focus on guaranteeing memory safety at compile time, we‚Äôll need to put a little bit of thought into how to implement all this. A Tensor may or may not have either one or two immutable references to its parent Tensors and also may or may not have been created using an Op. We also need a way to compute a Tensor‚Äôs gradient wrt to its children. . To make everything simple, we‚Äôll wrap the gradient of a Tensor in a RefCell so we can safely change its value by calling .borrow_mut() without needing to keep a mutable reference to it. Keeping a mutable reference might not be possible if one Tensor has two distinct children ‚Äî Rust only allows one mutable reference to be in scope at a time. . Let‚Äôs get started by adding a few field to our original Tensor struct: . . // src/tensor.rs use std::cell::RefCell; pub struct Tensor { ... track_grad: bool, lhs_parent: Option&lt;&amp;Tensor&gt;, rhs_parent: Option&lt;&amp;Tensor&gt;, create_op: Option&lt;Ops&gt;, derivative: RefCell&lt;Vec&lt;f32&gt;&gt;, } . . If you add this and press ‚åò-S, you‚Äôll probably see that rust-analyzer starts throwing out dozens of warnings and errors. Now that we‚Äôre storing references to other Tensors inside our Tensor, we need to add lifetime parameters to our struct so the Rust compiler can make sure that these references don‚Äôt go out of scope during any part of our program. . If you‚Äôre using VSCode with rust-analyzer like I am, fixing lifetime errors in Rust is pretty painless when the compiler literally guides you through it and tells you where the problem is, why it exists, and how to fix it :) . Here‚Äôs a diff showing the changes that I had to make: . . // src/tensor.rs -pub struct Tensor { +pub struct Tensor&lt;&#39;a&gt; { ... - lhs_parent: Option&lt;&amp;Tensor, - rhs_parent: Option&lt;&amp;Tensor, + lhs_parent: Option&lt;&amp;&#39;a Tensor&lt;&#39;a&gt;&gt;, + rhs_parent: Option&lt;&amp;&#39;a Tensor&lt;&#39;a&gt;&gt;, } -impl fmt::Display for Tensor { +impl&lt;&#39;a&gt; fmt::Display for Tensor&lt;&#39;a&gt; { ... } -impl Clone for Tensor { +impl&lt;&#39;a&gt; Clone for Tensor&lt;&#39;a&gt; { ... } -impl Tensor { +impl&lt;&#39;a&gt; Tensor&lt;&#39;a&gt; { ... - pub fn new(data: Vec&lt;f32&gt;, shape: &amp;[usize]) - -&gt; Result&lt;Tensor, TensorError&gt; { + pub fn new&lt;&#39;b&gt;(data: Vec&lt;f32&gt;, shape: &amp;[usize]) + -&gt; Result&lt;Tensor&lt;&#39;b&gt;, TensorError&gt; { if data.len() == Tensor::calc_tensor_len_from_shape(shape) &amp;&amp; !shape.is_empty() &amp;&amp; shape.len() &lt; 3 { Ok(Tensor { data, shape: shape.to_vec(), strides: Tensor::calc_strides_from_shape(shape), + track_grad: true, + create_op: None, + derivative: RefCell::new( + vec![0.0; Tensor::calc_tensor_len_from_shape(shape)]), + lhs_parent: None, + rhs_parent: None, }) } else { Err(TensorError::InvalidTensor) } } } -impl Add for &amp;Tensor { - type Output = Tensor; +impl&lt;&#39;a&gt; Add for &amp;&#39;a Tensor&lt;&#39;a&gt; { + type Output = Tensor&lt;&#39;a&gt;; - fn add(self, other: &amp;Tensor) -&gt; Tensor { + fn add(self, other: &amp;&#39;a Tensor) -&gt; Tensor&lt;&#39;a&gt; { ... } } -impl Sub for &amp;Tensor { - type Output = Tensor; +impl&lt;&#39;a&gt; Sub for &amp;&#39;a Tensor&lt;&#39;a&gt; { + type Output = Tensor&lt;&#39;a&gt;; - fn sub(self, other: &amp;Tensor) -&gt; Tensor { + fn sub(self, other: &amp;&#39;a Tensor) -&gt; Tensor&lt;&#39;a&gt; { ... } } -impl Mul for &amp;Tensor { - type Output = Tensor; +impl&lt;&#39;a&gt; Mul for &amp;&#39;a Tensor&lt;&#39;a&gt; { + type Output = Tensor&lt;&#39;a&gt;; - fn mul(self, other: &amp;Tensor) -&gt; Tensor { + fn mul(self, other: &amp;&#39;a Tensor) -&gt; Tensor&lt;&#39;a&gt; { ... } } -impl Div for &amp;Tensor { - type Output = Tensor; +impl&lt;&#39;a&gt; Div for &amp;&#39;a Tensor&lt;&#39;a&gt; { + type Output = Tensor&lt;&#39;a&gt;; - fn div(self, other: &amp;Tensor) -&gt; Tensor { + fn div(self, other: &amp;&#39;a Tensor) -&gt; Tensor&lt;&#39;a&gt; { ... } } . . Note: you might notice that you don‚Äôt need to declare a lifetime parameter on other in the impl blocks for Add, Sub, Mul, and Div. I‚Äôm including the lifetime parameters here since we‚Äôll need to add them in the next step since the output of Tensor::tensorop() will store a reference to other as one of its parents. This means that lifetime parameters will be needed to make sure that the reference to the parent remains valid for the full lifetime of the output. . Now that we‚Äôve satisfied the Rust compiler, let‚Äôs modify Tensor::tensor_op() and Tensor::pow() to use the new struct fields we just added. . . // src/tensor.rs impl&lt;&#39;a&gt; Tensor&lt;&#39;a&gt; { ... - fn tensor_op(&amp;self, other: &amp;Tensor, op: Ops) - -&gt; Result&lt;Tensor, TensorError&gt; { + fn tensor_op(&amp;&#39;a self, other: &amp;&#39;a Tensor, op: Ops) + -&gt; Result&lt;Tensor, TensorError&gt; { ... - Tensor::new(new_data, &amp;new_shape) + Ok(Tensor { + data: new_data, + shape: new_shape.to_vec(), + strides: Tensor:: + calc_strides_from_shape(&amp;new_shape), + track_grad: true, + create_op: Some(op), + derivative: RefCell::new( + vec![0.0; Tensor::calc_tensor_len_from_shape(&amp;new_shape)]), + lhs_parent: Some(self), + rhs_parent: Some(other), + }) } ... pub fn pow(&amp;self, exp: f32) -&gt; Result&lt;Tensor, TensorError&gt; { ... - Tensor::new(new_data, &amp;new_shape) + Ok(Tensor { + data: new_data, + shape: self.shape.to_vec(), + strides: Tensor::calc_strides_from_shape(&amp;self.shape), + track_grad: true, + create_op: Some(Ops::Pow(exp)), + derivative: RefCell::new( + vec![0.0; Tensor::calc_tensor_len_from_shape(&amp;self.shape)]), + lhs_parent: Some(self), + rhs_parent: None, + }) } } . . Ok, we‚Äôre halfway there! We can now represent a sequence of operations as a computation graph. Let‚Äôs update our pretty-printing code to print out the structure of our internal representation (IR) of the computation graph. . This probably isn‚Äôt the most elegant way of implementing this but it works and I‚Äôm not motivated enough right now to try and improve it. . // src/tensor.rs impl&lt;&#39;a&gt; fmt::Display for Tensor&lt;&#39;a&gt; { fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;&#39;_&gt;) -&gt; fmt::Result { fn recurse(tensor: &amp;Tensor, level: usize) -&gt; String { let indent = &quot; &quot;.to_string().repeat(level); let lhs = match tensor.lhs_parent { Some(t) =&gt; recurse(t, level + 1), None =&gt; &quot;None&quot;.to_string(), }; let rhs = match tensor.rhs_parent { Some(t) =&gt; recurse(t, level + 1), None =&gt; &quot;None&quot;.to_string(), }; let op = match &amp;tensor.create_op { Some(t) =&gt; format!(&quot;{}&quot;, t), None =&gt; &quot;None&quot;.to_string(), }; format!( &quot; n{}Value: {:?} n{}Shape: {:?} n{}Lhs: {} n{}Rhs: {} n{}Op: {} n{}TrackGrad: {:?} n{}Derivative: {:?}&quot;, indent, tensor.data, indent, tensor.shape, indent, lhs, indent, rhs, indent, op, indent, tensor.track_grad, indent, *(tensor.derivative.borrow()) ) } let graph = recurse(self, 0); write!(f, &quot;{}&quot;, graph) } } . // src/bin/main.rs fn main() -&gt; Result&lt;(), TensorError&gt; { let a = Tensor::new(vec![1.0, 2.0, 3.0], &amp;[1, 3])?; let b = Tensor::new(vec![1.0, 2.0, 3.0], &amp;[3])?; let c = &amp;a * &amp;b; let d = c.pow(2.0)?; println!(&quot;{}&quot;, d); Ok(()) } . . Let‚Äôs run this and take a look at the resulting IR: . . bilal@Bilals-MacBook-Pro l2 % cargo run Value: [1.0, 16.0, 81.0] Shape: [1, 3] Lhs: Value: [1.0, 4.0, 9.0] Shape: [1, 3] Lhs: Value: [1.0, 2.0, 3.0] Shape: [1, 3] Lhs: None Rhs: None Op: None TrackGrad: true Derivative: [0.0, 0.0, 0.0] Rhs: Value: [1.0, 2.0, 3.0] Shape: [3] Lhs: None Rhs: None Op: None TrackGrad: true Derivative: [0.0, 0.0, 0.0] Op: Multiply TrackGrad: true Derivative: [0.0, 0.0, 0.0] Rhs: None Op: Pow: 2 TrackGrad: true Derivative: [0.0, 0.0, 0.0] . . Maybe it‚Äôs not the nicest looking graph, but it works well for when you‚Äôre trying to visually verify that your gradients are being calculated correctly. . . Now that we have a computation graph, we need to find a way to backpropogate through it. . The simplest way would be to recursively call a function named backward() on the tensor you want to calculate the gradient with respect to. backward() would first take the gradient of the current tensor (the gradient of the output tensor would be with respect to itself so its gradient is $1$) then use it to calculate (and accumulate, if necessary) the gradient of its parent(s) before calling .backward() on the parent Tensor(s) to recursively calculate the gradient for the entire computation graph. . There are a couple of problems with this: . First, recursively calling .backward() on the entire computation graph would be very memory-inefficient. . Second, if the computation graph has multiple branches (like in a Resnet), the backwards pass over the computation graph will have to be computed multiple times as the gradients for the parent Tensor of each branch in the network are accumulated. Doing it this way would have make computing the backwards pass very slow and inefficient. . Luckily, there is a better way of doing this. If we topologically sort and reverse the graph so that all the Tensors are ordered in a way so that the gradients for all child Tensors of a certain Tensor have already been computed and the gradient for the current Tensor has already been accumulated (if necessary), we won‚Äôt have to re-compute any parts of the graph. . Let‚Äôs see how we could implement this in Rust: . . // src/tensor.rs impl&lt;&#39;a&gt; Tensor&lt;&#39;a&gt; { ... pub fn backward(&amp;self) { // from https://github.com/evcu/numpy_autograd/blob/master/my_autograd.py#L147 let mut seen: Vec&lt;&amp;Tensor&gt; = Vec::new(); let mut sorted: Vec&lt;&amp;Tensor&gt; = Vec::new(); fn topological_sort&lt;&#39;a&gt;( vr: &amp;&#39;a Tensor, seen: &amp;mut Vec&lt;&amp;Tensor&lt;&#39;a&gt;&gt;, sorted: &amp;mut Vec&lt;&amp;Tensor&lt;&#39;a&gt;&gt;, ) { if !seen.contains(&amp;vr) &amp;&amp; (vr.lhs_parent.is_some() || vr.rhs_parent.is_some()) { seen.push(vr); if vr.lhs_parent.is_some() { topological_sort(vr.lhs_parent.unwrap(), seen, sorted); } if vr.rhs_parent.is_some() { topological_sort(vr.rhs_parent.unwrap(), seen, sorted); } sorted.push(vr); } } // Topologically sort the computation graph topological_sort(&amp;self, &amp;mut seen, &amp;mut sorted); // reverse it sorted.reverse(); // Set the derivative of the output of the computation // graph to itself to equal 1 (usually the derivative // of the loss wrt itself) *sorted[0].derivative.borrow_mut() = vec![1.0; Tensor::calc_tensor_len_from_shape(&amp;sorted[0].shape)]; for t in sorted.iter() { t.grad() } } } . . The .grad() function doens‚Äôt exist yet, but its purpose is to take the gradient of the current Tensor t and use it to compute the gradients of its parent(s). Since we wrapped the derivative field of Tensor in a RefCell(), we can use something like *lhs_parent.borrow_mut() = gradient; to safely mutate the parent‚Äôs gradient. . Here‚Äôs how I did it: . . // src/tensor.rs impl&lt;&#39;a&gt; Tensor&lt;&#39;a&gt; { fn grad(&amp;self) { // get the gradient of the derivative of self wrt output // d_x/d_loss let d = Tensor::new(self.derivative.borrow().clone(), &amp;self.shape).unwrap(); // if lhs_parent exists if let Some(t) = self.lhs_parent { // calculate the gradient of lhs_parent wrt x // d_lhs/d_x let d_lhs = match &amp;self.create_op { Some(Ops::TensorOp(TensorOp::Add)) =&gt; Tensor::new(vec![1.0; Tensor::calc_tensor_len_from_shape(&amp;self.shape)], &amp;self.shape, ), Some(Ops::TensorOp(TensorOp::Sub)) =&gt; Tensor::new( vec![1.0; Tensor::calc_tensor_len_from_shape(&amp;self.shape)], &amp;self.shape, ), Some(Ops::TensorOp(TensorOp::Mul)) =&gt; Ok(self.rhs_parent.unwrap().clone()), Some(Ops::TensorOp(TensorOp::Div)) =&gt; { let temp = self.rhs_parent.unwrap() .pow(-1.0).unwrap(); Tensor::new(temp.data.clone(), &amp;temp.shape) } _ =&gt; Err(TensorError::GradError), } .unwrap(); // calculate the gradient of lhs_parent wrt loss // d_lhs/d_loss = d_lhs/d_x * d_x/d_loss let d_lhs = match self.create_op { _ =&gt; &amp;d_lhs * &amp;d, }; // accumulate the gradient of d_lhs/d_loss if necessary let d_lhs_prev = Tensor::new(t.derivative.borrow().clone(), &amp;t.shape).unwrap(); let d_lhs = &amp;d_lhs + &amp;d_lhs_prev; // assign to the derivative of the parent *t.derivative.borrow_mut() = d_lhs.data; } // if rhs_parent exists if let Some(t) = self.rhs_parent { // calculate the gradient of rhs_parent wrt x // d_rhs/d_x let d_rhs = match self.create_op { Some(Ops::TensorOp(TensorOp::Add)) =&gt; Tensor::new( vec![1.0; Tensor::calc_tensor_len_from_shape(&amp;self.shape)], &amp;self.shape, ), Some(Ops::TensorOp(TensorOp::Sub)) =&gt; Tensor::new( vec![1.0; Tensor::calc_tensor_len_from_shape(&amp;self.shape)], &amp;self.shape, ), Some(Ops::TensorOp(TensorOp::Mul)) =&gt; Ok(self.lhs_parent.unwrap().clone()), Some(Ops::TensorOp(TensorOp::Div)) =&gt; { let neg1 = Tensor::new(vec![-1.0], &amp;[1]).unwrap(); let t_powed = t.pow(-2.0).unwrap(); let temp = &amp;neg1 * self.lhs_parent.unwrap(); let temp = &amp;temp * &amp;t_powed; Tensor::new(temp.data.clone(), &amp;temp.shape) } _ =&gt; Err(TensorError::GradError), } .unwrap(); // calculate the gradient of rhs_parent wrt loss // d_rhs/d_loss = d_rhs/d_x * d_x/d_loss let d_rhs = match self.create_op { _ =&gt; &amp;d_rhs * &amp;d, }; // accumulate the gradient of d_rhs/d_loss if necessary let d_rhs_prev = Tensor::new(t.derivative.borrow().clone(), &amp;t.shape).unwrap(); let d_rhs = &amp;d_rhs + &amp;d_rhs_prev; // assign to the derivative of the parent *t.derivative.borrow_mut() = d_rhs.data; } } } . . That should be pretty much it. Try it out: . // src/bin/main.rs fn main() -&gt; Result&lt;(), TensorError&gt; { let a = Tensor::new(vec![2.0], &amp;[1]).unwrap(); let b = Tensor::new(vec![3.0], &amp;[1]).unwrap(); let c = &amp;a * &amp;b; c.backward(); println!(&quot;{}&quot;, c); Ok(()) } . bilal@Bilals-MacBook-Pro l2 % cargo run Value: [6.0] Shape: [1] Lhs: Value: [2.0] Shape: [1] Lhs: None Rhs: None Op: None TrackGrad: true Derivative: [3.0] Rhs: Value: [3.0] Shape: [1] Lhs: None Rhs: None Op: None TrackGrad: true Derivative: [2.0] Op: Multiply TrackGrad: true Derivative: [1.0] . üéâ, you now have a semi-complete autograd engine! . . Advanced Ops . . Let‚Äôs add support for fast matrix multiplications with BLAS. . todo talk about blas . First up, lets implement the transpose() operator . . // src/ops.rs #[derive(Debug, PartialEq)] pub enum Ops { ... Transpose, } impl fmt::Display for Ops { fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;&#39;_&gt;) -&gt; fmt::Result { match self { ... Ops::Transpose =&gt; write!(f, &quot;Transpose&quot;), } } } . // src/tensor.rs impl&lt;&#39;a&gt; Tensor&lt;&#39;a&gt; { fn grad(&amp;self) { if let Some(t) = self.lhs_parent { ... Some(Ops::Transpose) =&gt; Tensor::new(vec![1.0], &amp;[1]), // dummy value } .unwrap(); let d_lhs = match self.create_op { Some(Ops::Transpose) =&gt; d.transpose().unwrap(), _ =&gt; &amp;d_lhs * &amp;d, }; } pub fn transpose(&amp;self) -&gt; Result&lt;Tensor, TensorError&gt; { let mut transposed_shape = self.shape.clone(); let mut transposed_strides = self.strides.clone(); transposed_shape.reverse(); transposed_strides.reverse(); let mut new_data: Vec&lt;f32&gt; = Vec::with_capacity( Tensor::calc_tensor_len_from_shape(&amp;transposed_shape)); for i in 0..transposed_shape[0] { if transposed_shape.len() == 1 { new_data.push(self.data[Tensor:: get_physical_idx(&amp;[i], &amp;transposed_strides)] ); } else { for j in 0..transposed_shape[1] { new_data.push(self.data[Tensor:: get_physical_idx(&amp;[i, j], &amp;transposed_strides)]); } } } Ok(Tensor { data: new_data, shape: transposed_shape.to_vec(), strides: Tensor::calc_strides_from_shape(&amp;transposed_shape), track_grad: true, create_op: Some(Ops::Transpose), derivative: RefCell::new(vec![ 0.0; Tensor::calc_tensor_len_from_shape(&amp;transposed_shape) ]), lhs_parent: Some(self), rhs_parent: None, }) } } . . Now that we have this, let‚Äôs add matmul support. . First up, let‚Äôs add a BLAS crate to Cargo.toml. Note that I‚Äôm using Apple‚Äôs accelerate as the BLAS library backend since its already installed on my Macbook pro, but you can change it to use another BLAS library if you want. . . [dependencies] blas = &quot;0.20.0&quot; blas-src = { version = &quot;0.6&quot;, features = [&quot;accelerate&quot;] } . . Let‚Äôs add some Ops and errors for matmul . . // src/ops.rs #[derive(Debug, PartialEq)] pub enum Ops { ... Matmul, } impl fmt::Display for Ops { fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;&#39;_&gt;) -&gt; fmt::Result { match self { ... Ops::Matmul =&gt; write!(f, &quot;Matmul&quot;), } } } . // src/errors.rs #[derive(Debug, Clone)] pub enum TensorError { ... MatmulShapeError, } impl fmt::Display for TensorError { fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt; fmt::Result { match self { ... TensorError::MatmulShapeError =&gt; write!( f, &quot;Tensors must be two dimensions each and must be matrix multipliable&quot; ), } } } . . Let‚Äôs add the matrix multiplication code . . impl&lt;&#39;a&gt; Tensor&lt;&#39;a&gt; { #[allow(clippy::many_single_char_names)] fn two_dimension_matmul(lhs: &amp;Tensor, rhs: &amp;Tensor, out: &amp;mut Vec&lt;f32&gt;) { let lhs = lhs.transpose().unwrap(); let rhs = rhs.transpose().unwrap(); let a: Vec&lt;f64&gt; = lhs.data.iter().map(|val| *val as f64).collect(); let b: Vec&lt;f64&gt; = rhs.data.iter().map(|val| *val as f64).collect(); let mut c: Vec&lt;f64&gt; = vec![0.0; Tensor::calc_tensor_len_from_shape(&amp;[lhs.shape[1], rhs.shape[0]])]; let (m, n, k) = ( lhs.shape[1] as i32, rhs.shape[0] as i32, lhs.shape[0] as i32, ); unsafe { dgemm(b&#39;N&#39;, b&#39;N&#39;, m, n, k, 1.0, &amp;a, m, &amp;b, k, 1.0, &amp;mut c, m); } let c = c.iter().map(|val| *val as f32).collect(); let c = Tensor::new(c, &amp;[rhs.shape[0], lhs.shape[1]]).unwrap(); let c = c.transpose().unwrap(); let mut c = c.data; out.append(&amp;mut c); } pub fn matmul(&amp;&#39;a self, rhs: &amp;&#39;a Tensor) -&gt; Result&lt;Tensor, TensorError&gt; { let new_shape = Tensor::validate_tensors(self, &amp;rhs)?; if (new_shape.len() &lt;= 1) || (new_shape.len() &gt; 2) { return Err(TensorError::MaxDimsError); } let mut new_data = Vec::with_capacity(Tensor:: calc_tensor_len_from_shape(&amp;new_shape)); if new_shape.len() == 2 { Tensor::two_dimension_matmul(&amp;self, rhs, &amp;mut new_data) } else { return Err(TensorError::MatmulShapeError); } Ok(Tensor { data: new_data, shape: new_shape.to_vec(), strides: Tensor::calc_strides_from_shape(&amp;new_shape), track_grad: true, create_op: Some(Ops::Matmul), derivative: RefCell::new(vec![0.0; Tensor:: calc_tensor_len_from_shape(&amp;new_shape)]), lhs_parent: Some(self), rhs_parent: Some(rhs), }) } } . . Now that we have that, let‚Äôs add autograd support for matmul . . // src/tensor.rs impl&lt;&#39;a&gt; Tensor&lt;&#39;a&gt; { fn grad(&amp;self) { if let Some(t) = self.lhs_parent { let d_lhs = match &amp;self.create_op { ... Some(Ops::Matmul) =&gt; self.rhs_parent.unwrap().transpose(), } .unwrap(); let d_lhs = match self.create_op { ... Some(Ops::Matmul) =&gt; d.matmul(&amp;d_lhs).unwrap(), _ =&gt; &amp;d_lhs * &amp;d, }; } if let Some(t) = self.rhs_parent { let d_rhs = match self.create_op { ... Some(Ops::Matmul) =&gt; self.lhs_parent.unwrap().transpose(), } .unwrap(); let d_rhs = match self.create_op { ... Some(Ops::Matmul) =&gt; d_rhs.matmul(&amp;d).unwrap(), }; let d_rhs_prev = Tensor::new(t.derivative.borrow().clone(), &amp;t.shape).unwrap(); let d_rhs = &amp;d_rhs + &amp;d_rhs_prev; *t.derivative.borrow_mut() = d_rhs.data; } } } . . Let‚Äôs try it out: . // src/main.rs fn main() -&gt; Result&lt;(), TensorError&gt; { let a = Tensor::new(vec![1.0, 2.0, 3.0, 4.0, 5.0, 6.0], &amp;[2, 3]).unwrap(); let b = Tensor::new(vec![1.0, 2.0, 3.0, 4.0, 5.0, 6.0], &amp;[3, 2]).unwrap(); let c = a.matmul(&amp;b).unwrap(); c.backward(); println!(&quot;{}&quot;, c); Ok(()) } . bilal@Bilals-MacBook-Pro l2 % cargo run Compiling l2 v0.1.0 (/Users/bilal/Desktop/l2) Finished dev [unoptimized + debuginfo] target(s) in 1.46s Running `target/debug/main` Value: [22.0, 28.0, 49.0, 64.0] Shape: [2, 2] Lhs: Value: [1.0, 2.0, 3.0, 4.0, 5.0, 6.0] Shape: [2, 3] Lhs: None Rhs: None Op: None TrackGrad: true Derivative: [3.0, 7.0, 11.0, 3.0, 7.0, 11.0] Rhs: Value: [1.0, 2.0, 3.0, 4.0, 5.0, 6.0] Shape: [3, 2] Lhs: None Rhs: None Op: None TrackGrad: true Derivative: [5.0, 5.0, 7.0, 7.0, 9.0, 9.0] Op: Matmul TrackGrad: true Derivative: [1.0, 1.0, 1.0, 1.0] . . Well thats pretty much it for the first draft. Ill see about adding more stuff when I redo this whole post. . . Future Work . . rust arrays vs vec const generics | . | jax | compiler in rust | . . Conclusions . . todo . benchmarks | subsections | gradient vs derivative | standardize code snippets | move implementing ops to beginning | naive matmul | slicing? | . . Resources . . . References . . I guess the fact that I like to spend my last free summer working on a side project says a lot about me :p¬†&#8617; . | I‚Äôm almost certain that there are a few bugs in how I handle backpropogation through broadcasted tensors¬†&#8617; . | That‚Äôs the summer of 2019, for those of you reading this in the near or not so near future :)¬†&#8617; . | https://blog.ezyang.com/2019/05/pytorch-internals/‚Äô&gt;http://blog.ezyang.com/2019/05/pytorch-internals¬†&#8617; . | In my defense, I was pretty bad at algorithmy stuff back then¬†&#8617; . |",
            "url": "https://bkkaggle.github.io/blog/rust/2020/08/02/writing-a-machine-learning-library-in-rust.html",
            "relUrl": "/rust/2020/08/02/writing-a-machine-learning-library-in-rust.html",
            "date": " ‚Ä¢ Aug 2, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "Algpt2 Part 2",
            "content": ". Part 1: Best Practices for Finetuning Large Transformer Language models . Part 2: How I (almost) replicated OpenAI‚Äôs GPT-2 (124M version) . . TL;DR . . A few months ago I started working on a research project trying to pretrain my own, more efficient language model from scratch. I got access to a 128-core TPUv3 pod from the Tensorflow Reseach Cloud and used it to pretrain a $124$M parameter GPT-2 model to a perplexity pretty close to OpenAI‚Äôs results (my pretrained model was trained for about $1/8$th of the number of iterations that OpenAI trained their model for and got $21$ ppl on OpenWebText compared to $17$ ppl for OpenAI‚Äôs model), and then pretrained an ALBERT-style GPT-2 (that I‚Äôm calling ALGPT2) language model with a factorized input embedding and layer-wise parameter sharing that would reduce the number of paramters in the model from $124$M to around $12$M. . Unfortunately, ALGPT-2 doesn‚Äôt perform as well as GPT-2 (ALGPT-2 gets $31$ ppl on OpenWebText compared to $21$ ppl for my pretrained GPT-2 model), but I‚Äôm writing this series of blog posts to go through everything I‚Äôve learned over the last few months. . . The Idea . . The main thing that I wanted to do from this sort-of ‚Äúresearch project‚Äù that I was working on by myself this spring was to develop and train a more efficient version of the $124$M parameter version of GPT-2. I wanted to pretrain the $1.5$B parameter version of GPT-2 but since I only got access to the TPU pod for a week, I had to choose a model that would train in time. A $100$k iteration training run takes about $20$ hours to run which gave me plenty of time to run multiple experiments. In contrast, following OpenAI‚Äôs training procedure exactly and training for the full $800$k iterations would take up almost an entire week and use up most of my quota. . I was able to almost replicate the $124$M parameter version of GPT-2 by pretraining it to a perplexity pretty close to OpenAI‚Äôs results (my pretrained model used was trained for about $1/8$th of the number of iterations that OpenAI trained their model for and got $21$ perplexity (ppl) on the standard OpenWebText dataset compared to $17$ ppl for OpenAI‚Äôs model), . My idea of making a more efficient transformer didn‚Äôt really work out since my pretrained transformer ended up being about $20$ppl worse than an equivalent GPT-2 model, but I wanted to writeup what I learned over the two or three months that I was working on this anyway. . . Background . . A little bit about myself: I‚Äôm an incoming software engineering student at the University of Waterloo and this post is supposed to be a writeup of a NLP research project that I was working on from around March to May of 2020 (right in the middle of the first Covid-19 lockdown of 2020, I‚Äôm currently writing this on July 15, 2020 while waiting for my Pix2PixHD model to train for a few hundred epochs on colab for a new project that I‚Äôm working on). . Over the last three or four years I‚Äôve done a lot of machine learning related stuff. I started out back in early 2017 by going through the Introduction to Machine Learning with Python and Hands-On Machine Learning with Scikit-Learn and TensorFlow books. At the time, I didn‚Äôt really understand all the math behind neural networks, but it got me hooked on ML and then I took the deeplearning.ai courses on Coursera and the original fast.ai course (back in late 2017 when they hadn‚Äôt switched over to Pytorch and still used Tensorflow and Keras). . I started competing on Kaggle in early 2018 and kept on competing in competitions non-stop for about a year and a half, winning a few medals and becoming a competitions expert (At one point I was ranked in the top $100$ Kagglers on the competitions leaderboard). Kaggle was a really nice way to get a lot of experience using neural networks because of the wide range of competitions and datasets that I had access to. I started out by doing a few semantic segmentation competitions then moved onto competing in NLP competitions. Since around mid 2019, I‚Äôve been working on a bunch of different projects in ML and lower-level CS stuff. I worked on making a PyTorch-style machine learning library in C++ and more recently in Rust, and for the last few months I‚Äôve also been trying to keep up with all the new machine learning (esp. NLP) papers on arXiv. . I was pretty lucky that I started learning NLP right before transformers exploded in popularity, I remember when word2vec and LSTMs were still SOTA on a lot of NLP tasks, and it has been really interesting to see how much the field of NLP has changed in just a few years, going from when LSTMs with only a a handful of layers and somewhere on the order of $512$ units were considered to be large networks and computationally expensive to train, to training LSTMs with attention layers on top, to the original transformer encoder/decoder networks, to ULMFIT and ELMO, then BERT, RoBERTa, GPT-2, and T5, to just a few months ago with the explosion of new, more efficient replacements for self-attention like the Sparse Transformer, the Reformer, and Synthesizers, and now GPT-3, which IMO has the potential to really change the whole field of NLP. . Just a few years ago we trained shallow recurrent networks on datasets, then pretrained large transformer language models on large datasets and finetuned on task-specific datasets. Now the whole idea of just training a gigantic language model on a huge dataset, then conditioning the model in a form of few-shot learning by prepending a few examples of a certain task to an input feels like it can really make NLP models a lot more accessible and easier to productionize as well as making human-chatbot interactions a lot more realistic than they are today. . I‚Äôve rambled on for long enough, lets get to the main topic of this post. . . GPT-2 and ALBERT . . GPT-2 is a transformer decoder. . The embedding layer at the root of the model maps a one-hot vector of a given token‚Äôs index (all the GPT-2 models use a vocabulary size of $50257$) to a $768$ dimensional vector (all GPT-2 numbers in this blog post will be for the $124$m parameter version of GPT-2). . The embedding matrix is followed by a stack of self-attention and feed-forward layers that each output a $768$ dimensional vector (keeping the number of outputs for each layer constant), which makes up the main part of the transformer. . The stack of self-attention layers is then followed by an output embedding (the weights of the input and output embeddings are tied to make training easier) that maps the $768$ dimensional vector that is the output of the last layer of the transformer to the same $50257$ dimensional vector that represents the probability of each token in the vocabulary being the next token in the sequence. . Take a look at The Illustrated GPT-2 for a more in-depth look into GPT-2. . ALBERT (A Lite BERT) is a paper that takes a look at BERT and identifies some ways in which to make it more efficient and reduce the number of parameters in the model in four major ways: a factorized embedding, layer-wise parameter sharing, a sentence-order-prediction auxillary loss, and removing dropout. . . Factorized embedding . . GPT-2‚Äôs embedding has a lot of parameters. It‚Äôs really just a matrix of dimensions $50257 times 768$. That means that the input embedding alone uses up almost $50257 times 768 = space sim 38,000,000$ parameters which is a pretty big chunk of the $128$M total parameters in the model. . The ALBERT authors propose a factorized embedding with an intermediate embedding size of $128$: one embedding of size $50257 times 128$ and another embedding of size $128 times 768$. By breaking up the large embedding matrix into two smaller matrices, the total number of parameters used in the embedding goes from about $38$M to about $6$M. . $50257 times 128 = sim 6,000,000$ . $128 times 768 = sim 100,000$ . The authors try different intermediate embedding sizes and settle on $128$ as a good tradeoff betweeen parameters and performance. . . Layer-wise parameter sharing . . In a normal transformer model, the transformer layers are created something like this: . class BERT(nn.Module): def __init__(self, n_layers): super().__init__() // ... self.blocks = nn.ModuleList([Block() for _ in range(n_layers)]) // ... def forward(self, x): // ... for block in self.blocks: x = block(x) // ... . ALBERT shares all parameters across the transformer layers something like this: . class ALBERT(nn.Module): def __init__(self, n_layers): super().__init__() // ... self.n_layers = n_layers self.block = Block() // ... def forward(self, x): // ... for _ in self.n_layers: x = block(x) // ... . By only defining one transformer block and looping around it n_layers times, ALBERT saves the GPU memory that would be used to store the parameters for all the layers. . Since we normally use $32$ bit floats to store parameters on the GPU, storing the $1.5$B parameter GPT-2 on the GPU will use up about $6$GB of the GPU‚Äôs memory ‚Äî that‚Äôs a pretty big chunk of the $16$GB of memory that‚Äôs on a normal V100 GPU already being used up before taking into account the memory needed to store the model‚Äôs activations as well as any momentum parameters needed by the optimizer. In contrast, if you share parameters across all transformer layers in the $1.5$B parameter GPT-2, the resulting model will only have about $37$M parameters, the parameter-sharing version would only use up around $148$MB of GPU memory. . The authors try applying parameter sharing to BERT and see that it reduces performance but makes it easier to train larger and larger models. . In a machine learning framework like JAX, which by default unrolls and inlines loops when it‚Äôs compiling your code with XLA, the size of the unrolled and inlined loop would make the computation graph really large and take a long time to compile. This is why you‚Äôre recommended to use somehting like lax.scan() in these situations. . . Sentence-order-prediction auxillary loss . The ALBERT authors add an auxillary loss to help training. Since language modelling is usually done autoregressively, I didn‚Äôt use this for my custom model. . . Removing dropout . The ALBERT authors remove all dropout from BERT and see that it significantly improves performance. . . That‚Äôs pretty much what my idea was: Take GPT-2, add a factorized embedding, share parameters across all transformer layers, remove dropout (I actually missed the part about ALBERT removing dropout until I was pretty far into my work, but I did run one or two runs without dropout to see how that works), and pretrain on a large dataset for a few hundred thousand iterations. . There‚Äôs no way that I could pretrain something like GPT-2 by myself, so I applied to the Tensorflow Research Cloud (TFRC). . The TFRC puts an emphasis on wanting to help researchers from non-traditional backgrounds which makes it an amazing resource for anyone who isn‚Äôt a ‚Äútraditional‚Äù machine learning researcher. They were willing to give me, a 17 year old with no formal education or credentials (not even a high school diploma :/), access to an extremely powerful cluster of TPUs at no cost. Being able to be a part of this program was really helpful to me, especially since I don‚Äôt have access to a dedicated GPU and usually rely on Colab‚Äôs free GPU to train my models. . I emailed the TFRC team to ask if I could get upgraded from $5$ separate individual TPUv3‚Äôs (with 8 cores each) to a TPU pod to pretrain a large language model. The very next day (!) I got an email back saying that I could get access to a preemptible 128-core TPUv3 Pod for 7 days which unfortunately wasn‚Äôt long enough for me to pretrain the $1.5$B parameter model but was enough to train a few runs on the $124$M model. . . Setup . . So for setup I‚Äôll be going through all the steps that I took to setup my VM and TPU Pod and preprocess the dataset as well. . When I was working on this project, I set up two VMs; One with a lot of RAM and CPU cores to process the data quickly and another small instance to run the TPU training script. One of the nice things about training on TPUs and TPU pods is that as long as your data has been preprocessed as a set of TFRecord files, you don‚Äôt need a really powerful VM instance which saves you a lot of money/compute credits. . You can look at this for a full list of every command that I used to setup the VM and preprocess the dataset. . . OpenWebText . . I used a n-1-standard-16 instance with TF2.1 to process the OpenWebText dataset. Make sure that you use an instance with a SSD instead of the default HDD because processing the dataset involves processing a lot of very small text files and is mostly limited by your drive‚Äôs io speed. I made the mistake of using a HDD and just extracting the dataset‚Äôs TAR archives took about 7 hours. I put all the data in a folder at ~/data/openwebtext/ so modify it if you want to download the data elsewhere. . TIL: most common linux utilities (like ls, mv, and cat) aren‚Äôt really that optimized for working with almost 10 million files like in OpenWebText. Just counting the number of text files in the dataset could take several minutes._ . Download the OpenWebText dataset (which is really just a tar archive of a bunch of tar archives that contain a lot of text files) and extract it: . gdown https://drive.google.com/uc?id=1EA5V0oetDCOke7afsktL_JDQ-ETtNOvx tar -xf openwebtext.tar.xz cat *.xz | tar -J -xf - -i . The dataset is about 12GB compressed and 53GB uncompressed and has just about 8 million text files. . I moved the first $100,000$ files in the dataset to a separate directory to create a validation set: . ls -f | head -100000 | xargs -i mv {} ../openwebtext-valid/ . . Tokenization . . I trained a Byte-level BPE tokenizer with a vocabulary size of $50,257$ (The same as GPT-2) on a $1$M file subset of the training set (I‚Äôm not sure if GPT-2 trains the tokenizer on the entire dataset or on just a subset, but I know that the CTRL paper trains their tokenizer on a 5% split of their training set.). I used Hugginface‚Äôs fast Rust-based Tokenizers library and their ByteLevelBPETokenizer tokenizer. . You can use my script here and run . python3 train_tokenizer.py --train_path ./data/openwebtext/ --save_path ./tokenizer/ --vocab_size 50257 --n_files 1000000 . to train the tokenizer, or just take a look at this for the main details (It just trains a tokenizer and saves it as well as a configuration file to disk): . import os import glob import json from tokenizers import ByteLevelBPETokenizer paths = glob.glob(os.path.join(&#39;./data/openwebtext&#39;, &#39;*&#39;))[:1000000] tok = ByteLevelBPETokenizer() tok.train(files=paths, vocab_size=args.vocab_size, special_tokens=args.control_codes) tok.save(&#39;./tokenizer/&#39;) tokenizer_config = { &quot;max_len&quot;: 1024 } with open(os.path.join(&#39;./tokenizer/&#39;, &quot;tokenizer_config.json&quot;), &#39;w&#39;) as fp: json.dump(tokenizer_config, fp) . . TFRecords . . TPU Pods expect your data to be available as a set of TFRecord files in a GCP cloud bucket that get downloaded to each of your TPU board‚Äôs built in powerful VM that will take care of de-serializing the files and feeding it to the TPU chips. Make sure that your GCP bucket and your TPU pod are in the same compute zone, otherwise you‚Äôll quickly rack up a lot of charges by transferring hundreds of GBs of data across compute zones. . Here‚Äôs a thing that‚Äôs not very well documented when working with TPU Pods (this doesn‚Äôt really apply to TPUs as much): TPU Pods create a lot (100s of GBs) of logs that get sent to Stackdriver, where you get charged about 50 cents for each GiB of logs ingested beyond a certain limit (I think it‚Äôs around 50GiB/month). In just a few days of training, I ended up being charged about a $$100$ IIRC. Luckily, I still had most of the free GCP credits so this didn‚Äôt end up being a major problem for me, but make sure to turn off ingesting logs for TPUs. . I ran into a problem early on when I got access to the TPU pod where my code would work perfectly on a single TPU, but would throw an Out of range: End of sequence error when running it on a TPU pod. I struggled with this for a pretty long time until I took a look at this Kaggle discussion post that says that TPUs expect each TPU board (8 cores) to get its own TFrecord file (until that point, I was splitting the train set into 8 TFRecord files where I should‚Äôve been splitting it into 16 (128 cores / 8 cores per board) TFRecord files. . TPUs are awesome for scaling to huge models and huge datasets, but there are a lot of TPU-specific information (especially for TPU Pods) that you need to know that‚Äôs not covered in the documentation and isn‚Äôt easy to find._** . You can use my script here and run . python3 make_tfrecords.py --path ./data/openwebtext/ --save_path ./train/ --files_per_tfrecord 500000 --use_control_codes --seq_len 1024 --min_seq_len --tokenizer ./tokenizer/ . python3 make_tfrecords.py --path ./data/openwebtext-valid/ --save_path ./val/ --files_per_tfrecord 50000 --use_control_codes --seq_len 1024 --min_seq_len --tokenizer ./tokenizer/ . to convert the raw text files from the train and validation splits into two sets of $16$ TFRecord files. . I ran a quick analysis on the average lengths of text fields in the dataset, $67$% of files have less than $1024$ tokens, $35$% of files have less than $512$ tokens, and only $10$% of files have less than $256$ tokens. This means that if I wanted to make the dataset as clean as possible and have each input sequence to the model be of a single contigous stream of $1024$ tokens, the dataset‚Äôs size would be a lot smaller. For this reason, everyone prepends a token like &lt;|endoftext|&gt; to the beginning of each sequence and concatenates together sequences with lengths smaller than $1024$. The specifics of how exactly you do that (e.g. do you treat the dataset as single stream of tokens and just break it up into sequences of length $1024$, or do you keep track of sequences smaller that $1024$ and just concatenate them together into a single sequence) really shouldn‚Äôt make too big of a difference in your model‚Äôs performance, but you can take a look at my implementation here. . My version doesn‚Äôt take full advantage of the fast, multithreaded batch_encode_plus() way to tokenize large datasets in parallel since it only keeps the first context_len tokens in each line of the files which makes dealing with files with more or less than $1024$ tokens harder. Because of this, tokenizing the dataset takes about $8$ hours, which is something I want to improve. . The train set comes out to about $26$GB and consists of about $8$M text files that have been transformed into just under $7$M tfrecord examples, each with $1024$ tokens (same as GPT-2). The validation set comes out to about $300$MB and consists of about $100$K text files that have been transformed into just about $90$K tfrecord examples, each with $1024$ tokens (also the same as GPT-2). . . # Code . . Since I‚Äôm using TPUs, the only real library that you can practically use right now would be Tensorflow. I didn‚Äôt want to have to go through the learning curve of learning how to make custom training loops and stuff in TF2 so I just stuck to using Keras. You can take a look at my training script (It‚Äôs pretty short) here. It‚Äôs pretty simple so I‚Äôm not going to copy over the entire training script, but I will talk about a few small code snippets. . I usually like to add a ptvsd breakpoint to my script so I can debug my training script locally with vscode before pushing it up to my VM . if args.debug: import ptvsd ptvsd.enable_attach(address=(&#39;localhost&#39;, 5678), redirect_output=True) ptvsd.wait_for_attach() breakpoint() . I‚Äôm using Weights&amp;Biases to keep track of my experiments and save checkpoints. . wandb.login() wandb.init(project=&#39;lm-finetuning&#39;, config=args, tags=args.tags) ... wandb_callback = WandbCallback(save_model=False) . Usually when you‚Äôre using a TPU with Keras, you pass in the IP address and port of the TPU to TPUClusterResolver, but you pass the name of the TPU itself to the resolver when using a TPU Pod. . resolver = tf.distribute.cluster_resolver.TPUClusterResolver(tpu=args.tpu) tf.config.experimental_connect_to_cluster(resolver) tf.tpu.experimental.initialize_tpu_system(resolver) . . Replicating GPT-2 . . I tried to use as many of the original hyperparameters that OpenAI used when I was replicating their $124$M parameter version of GPT-2, but I had to modify a few things so I could train everything in time. . Note: For some reason, the authors of the GPT-2 paper don‚Äôt state exactly what learning rates they used for training their models and instead just state ‚ÄúThe learning rate of each model was manually tuned for the best perplexity on a 5% held-out sample of WebText‚Äù. . OpenAI trains their models for a total of $800$K iterations at a batch size of $512$ (Which comes out to around a total of $60$ epochs through the training set). . I trained my GPT-2 model for $1/8th$ the number of iterations that OpenAI trained theirs for (a total of around $100$K iterations) since each $100$K iteration training run took about $20$ hours to run on my 128-core TPU Pod. If I wanted to train GPT-2 for the same number of iterations as OpenAI, a single training run would have used up most of my one week of access to the pod. . Since my TPU pod was preemptible and resets every $24$ hours I usually had to resume my training run at least once and is the reason why all of these graphs usually have two or more training runs on them. . . Replicating GPT-2 . . So here‚Äôs my model that came really close to replicating GPT-2, the training perplexity is about $21.5$ at the end of the almost $90$K training iterations. For comparison, GPT-2 gets a training perplexity about $17.5$ ppl after about $800$K training iterations, so a difference of only about $4$ ppl. . I made a colab notebook showing how to use my pretrained GPT-2 model to generate text . . AdamW vs Adafactor . . I wanted to use the memory-saving Adafactor optimizer to make it easier to train larger language models but all of my Adafactor training runs were a lot (~5ppl IIRC) worse than using AdamW (This may be due to not using Adafactor‚Äôs momentum parameter or relative update scale, so this is something I want to look into more soon). . . Learning rates . . I started out with using Adam‚Äôs default learning rate of $1e-4$ but I quickly figured out that I could train my models a lot faster by using a higher learning rate like $1e-3$. . Section 2 of the GPT-3 paper lists the learning rates the OpenAI team used for different sized models when training GPT-3. They use a learning rate of $6e-4$ for the $124$M version of their model and decrease the learning rate with model size. . You can take a look at this partial training run to see the difference between training at different learning rates. . . Pretraining ALGPT-2 . . Since I was using the Huggingface Transformers repository‚Äôs implementations of GPT-2 and ALBERT, I just forked the repository and modified a few files to implement my ALGPT-2 model. You can take a look at all the changes that I had to make here, most of the changes are only to make ALGPT-2 compatible with the /Transformers library and to be able to use the useful abstractions that it gives you, but most of the important code is in the modelling_algpt2.py file in which I just copied over the contents of modelling_gpt2.py and changed a few parts of the code. I‚Äôm only showing the changes that I made to the Pytorch version of ALGPT-2 here, the changes in the TF version are pretty similar to the Pytorch version and can be seen here. . . Implementing parameter sharing . . Implementing parameter sharing only involves changing a few lines of code: . class ALGPT2Model(ALGPT2PreTrainedModel): def __init__(self, config): super().__init__(config) ... - self.h = nn.ModuleList([Block(config.n_ctx, config, scale=True) - for _ in range(config.n_layer)]) + self.h = Block(config.n_ctx, config, scale=True) ... def forward(self, ...): ... if past is None: past_length = 0 - past = [None] * len(self.h) + past = [None] * self.config.n_layer ... - for i, (block, layer_past) in enumerate(zip(self.h, past)): + for i in range(self.config.n_layer): if self.output_hidden_states: all_hidden_states = all_hidden_states + (hidden_states.view(*output_shape),) - - outputs = block( + outputs = self.h( hidden_states, layer_past=layer_past, attention_mask=attention_mask, head_mask=head_mask[i], use_cache=use_cache, ) ... . . Implementing a factorized embedding . . Adding a factorized embedding is a little more work: . In the config.json that you use for your ALGPT-2 model, you need to specify that you want to use the ALGPT-2 and you need to specify the dimension of the factorized embedding that you want to use: . { + &quot;architectures&quot;: [&quot;ALGPT2LMHeadModel&quot;], &quot;attn_pdrop&quot;: 0.1, &quot;bos_token_id&quot;: 50256, &quot;embd_pdrop&quot;: 0.1, &quot;eos_token_id&quot;: 50256, &quot;initializer_range&quot;: 0.02, &quot;layer_norm_epsilon&quot;: 1e-5, + &quot;model_type&quot;: &quot;algpt2&quot;, &quot;n_ctx&quot;: 1024, &quot;n_embd&quot;: 768, &quot;n_head&quot;: 12, &quot;n_layer&quot;: 12, &quot;n_positions&quot;: 1024, &quot;resid_pdrop&quot;: 0.1, &quot;summary_activation&quot;: null, &quot;summary_first_dropout&quot;: 0.1, &quot;summary_proj_to_labels&quot;: true, &quot;summary_type&quot;: &quot;cls_index&quot;, &quot;summary_use_proj&quot;: true, &quot;vocab_size&quot;: 50257, + &quot;embedding_size&quot;: 128 } . Back in modelling_algpt2.py, define the two factorized embedding matrices (the first second matrix that is really just a simple linear layer) . class ALGPT2Model(ALGPT2PreTrainedModel): def __init__(self, config): super().__init__(config) ... - self.wte = nn.Embedding(config.vocab_size, config.n_embd) - self.wpe = nn.Embedding(config.n_positions, config.n_embd) + self.wte = nn.Embedding(config.vocab_size, config.embedding_size) + self.wpe = nn.Embedding(config.n_positions, config.embedding_size) + self.projection_layer = nn.Linear(config.embedding_size, config.n_embd) ... def forward(self, ...): ... hidden_states = inputs_embeds + position_embeds + token_type_embeds + hidden_states = self.projection_layer(hidden_states) ... class ALGPT2LMHeadModel(ALGPT2PreTrainedModel): def __init__(self, config): super().__init__(config) ... - self.lm_head = nn.Linear(config.n_embd, config.vocab_size, bias=False) + self.dense = nn.Linear(config.n_embd, config.embedding_size) + self.lm_head = nn.Linear(config.embedding_size, config.vocab_size, bias=False) def forward(self, ...): ... - lm_logits = self.lm_head(hidden_states) + dense = self.dense(hidden_states) + lm_logits = self.lm_head(dense) ... . . Effect of layer-wise parameter sharing . . This version of ALGPT-2 has about $47$M parameters while GPT-2 has $124$M. This ALGPT-2 model with parameter sharing trains a lot faster than GPT-2 ($9$ hours vs $20$ hours for a $90$K iteration training run), but is consistently about $10$ ppl worse than GPT-2 ($31$ vs $21$ ppl). . This difference is quite a bit larger than the difference between ALBERT and BERT, but might be explained by masked language modelling being an easier task than autoregressive language modelling. Increasing the size of the ALGPT-2 model might make it more competitive with GPT-2. . . Effect of removing dropout . . I ran a partial training run on removing dropout from ALGPT-2. I didn‚Äôt run it for very long, but it looks like removing dropout gives you a slight improvement (~3ppl). . . Effect of factorized embeddings . . I ran three experiments for $90$K iterations with three different values for the factorized embedding ($128$, $256$, and $512$) as well as the baseline version without a factorized embedding. . Model ALGPT-2 ALGPT-2 512 ALGPT-2 256 ALGPT-2 128 . Parameters | 47M | 34M | 20M | 13M | . Time | ~9H | ~9H | ~9H | ~9H | . Perplexity | 31 | 31 | 34 | 38 | . There was practically no difference in the loss curves between the baseline and the $512$ run since the change in the number of parameters wasn‚Äôt that great. However, the training runs with factorized embeddings of sizes $256$ and $128$ were significantly worse than the baseline: $34$ and $38$ ppl respectively, a pretty big difference from the baseline of $31$ ppl. . . Effect of model size . . I only had the time to run one more full training run with ALGPT-2-medium (this one is comparable to the $345$M version of GPT-2). ALGPT-2-medium has about $66$M parameters and took twice as long as ALGPT-2 to train (a little more than $20$ hours). The larger model size made quite a big difference in performance, the training perplexity decreased $5$ppl from $31$ to $26$ ppl. . . Conclusion and next steps . . Well that‚Äôs pretty much everything that I did. After my TPU pod‚Äôs quota was used up, I started working on a few other things over the summer and just kept delaying writing up what I did for a couple of months until now. . There are a lot of things that I still want to work on or look into: . Training larger versions of ALGPT-2 | Removing or replacing the normalization layers in transformers | Working on distilling/shrinking language models with billions of parameters to make them more accessible | Apply something like PPLM to condition language models for few-shot inference (kinda like what GPT-3 does). | . Thanks for reading through all this. If you think there‚Äôs any mistakes or inaccuracies in this post, please let me know. .",
            "url": "https://bkkaggle.github.io/blog/algpt2/2020/07/17/ALGPT2-part-2.html",
            "relUrl": "/algpt2/2020/07/17/ALGPT2-part-2.html",
            "date": " ‚Ä¢ Jul 17, 2020"
        }
        
    
  
    
        ,"post6": {
            "title": "Ml Flight Rules",
            "content": "My Repository: https://github.com/bkkaggle/machine-learning-flight-rules . A guide for astronauts (now, people doing machine learning) about what to do when things go wrong. . What are ‚Äúflight rules‚Äù? . . Copied from: https://github.com/k88hudson/git-flight-rules . Flight Rules are the hard-earned body of knowledge recorded in manuals that list, step-by-step, what to do if X occurs, and why. Essentially, they are extremely detailed, scenario-specific standard operating procedures._ . NASA has been capturing our missteps, disasters and solutions since the early 1960s, when Mercury-era ground teams first started gathering ‚Äúlessons learned‚Äù into a compendium that now lists thousands of problematic situations, from engine failure to busted hatch handles to computer glitches, and their solutions._ . ‚Äî Chris Hadfield, An Astronaut‚Äôs Guide to Life. . . General tips . . https://karpathy.github.io/2019/04/25/recipe has some great best practices for training neural networks. Some of his tips include: . Look at the wrongly classified predictions of your network . . This can help tell you what might be wrong with your dataset or model. . Always set the random seed . . This will prevent (most, but not all!) variation in results between otherwise identical training runs. . Make a baseline and then increase the size of your model until it overfits . . Use a very simplified baseline to test that your code works correctly . . Use a simple model (e.g. a small resnet18 or linear regression) and confirm that your code works properly and as it is supposed to. . Overfit on a single batch . . Try using as small of a batch size as you can (if you‚Äôre using batch normalization, that would be a batch of two examples). Your loss should go down to zero within a few iterations. If it doesn‚Äôt, that means you have a problem somewhere in your code. . Be sure that you‚Äôre data has been correctly processed . . Visualize your input data right before the out = model(x) to be sure that the data being sent to the network is correct (data has normalized properly, augmentations have been applied correctly, etc) . Simple models -&gt; complex models . . In most cases, start with a simple model (eg: resnet18) then go on to using larger and more complex models (eg: SE-ResNeXt-101). . Start with a simple optimizer . . Adam is almost always a safe choice, It works well and doesn‚Äôt need extensive hyperparameter tuning. Kaparthy suggests using it with a learning rate of 3e-4. I usually start with SGD with a learning rate of 0.1 and a momentum of 0.9 for most image classification and segmentation tasks. . Change one thing at a time . . Change one hyperparameter/augmentation/architecture and see its effects on the performance of your network. Changing multiple things at a time won‚Äôt tell you what changes helped and which didn‚Äôt. . Regularize your model . . Get more data . . Training on more data will always decrease the amount of overfitting and is the easiest way to regularize a model . Data augmentation . . This will artificially increase the size of your dataset and is the next best thing to collecting more data. Be sure that the augmentations you use make sense in the context of the task (flipping images of text in an OCR task left to right will hurt your model instead of helping it). . Use a pretrained network . . Pretrained networks (usually on Imagenet) help jumpstart your model especially when you have a smaller dataset. The domain of the pretrained network doesn‚Äôt usually prevent it from helping although pretraining on a similar domain will be better. . Decrease the batch size . . Smaller batch sizes usually help increase regularization . Use early stopping . . Use the validation loss to only save the best performing checkpoint of the network after the val loss hasn‚Äôt gone down for a certain number of epochs . Squeeze out more performance out of the network . . Ensemble . . Ensemble multiple models either trained on different cross validation splits of the dataset or using different architectures. This always boosts performance by a few percentage points and gives you a more confident measure of the performance of the model on the dataset. Averaging metrics from models in an ensemble will help you figure out whether a change in the model is actually an improvement or random noise. . Use early stopping on the val metric . . Increase the size of the model until you overfit, then add regularization | augmentation on mask | correlation in ensembles | noise in ensembling | . . Another great resource for best practices when training neural networks is (http://amid.fish/reproducing-deep-rl). This article focused on best practices for deep rl, but most of its recommendations are still useful on normal machine learning. Some of these tips include: . Learn to deal with long iteration times . . Most normal programming (web development, IOS development, etc) iteration times usually range in the seconds, but iteration times in machine learning range from minutes to hours. This means that ‚Äúexperimenting a lot and thinking a little‚Äù, which is usually fine in other programming contexts, will make you waste a lot of time waiting for a training run to finish. Instead, spending more time thinking about what your code does and how it might not work will help you make less mistakes and waste less time. . Keep a log of what you‚Äôre working on . . Keeping records (tensorboard graphs/model checkpoints/metrics) of training runs and configurations will really help you out when figuring out what worked and what didn‚Äôt. Additionally, keeping track of what you‚Äôre working on and your mindset as you‚Äôre working through a problem will help you when you have to come back to your work days or weeks later. . Try to predict how your code will fail . . Doing this will cut down on the amount of failures that seem obvious in retrospect. I‚Äôve sometimes had problems where I knew what was wrong with my code before going through the code to debug it. To stop making as many obvious mistakes, I wouldn‚Äôt start a new training run if I was uncertain about whether it would work, and then would find and fix what might have gone wrong. . Resources . . https://karpathy.github.io/2019/04/25/recipe | http://amid.fish/reproducing-deep-rl | . . Advanced tips . . some tips should be taken with a grain of salt | from: https://gist.github.com/bkkaggle/67bb9b5e6132e5d3c30e366c8d403369 | . . Basic architectures are sometimes better . . Always using the latest, most advanced, SOTA model for a task isn‚Äôt always the best choice. For example, Although more advanced semantic segmentation models like deeplab and pspnet are SOTA on datasets like PASCAL VOC and cityscapes, simpler architectures like U-nets are easier to train and adapt to new tasks and preform almost just as well on several recent kaggle competitions (https://www.kaggle.com/c/siim-acr-pneumothorax-segmentation/discussion/107824#latest-623920) (https://www.kaggle.com/c/tgs-salt-identification-challenge/discussion/69291#latest-592781). . Be sure that code that you copied from Github or Stackoverflow is correct . . It‚Äôs a good idea to check code from Github and Stackoverflow to make sure it is correct and that you are using it in the correct way. In the Quora insincere questions classification Kaggle competition, a popular implementation of attention summed up the weighted features instead of weighting the actual features with the attention weights (https://www.kaggle.com/c/quora-insincere-questions-classification/discussion/79911) (https://www.kaggle.com/c/quora-insincere-questions-classification/discussion/76583#450210). . Don‚Äôt excessively tune hyperparameters . . Every time you tune hyperparameters on a validation set, you risk overfitting those hyperparameters to that validation set. If done correctly, the improvement from having better hyperparameters will outweigh the risk of having hyperparameters that don‚Äôt work well on the test set. . Set up cyclic learning rates correctly . . If you‚Äôre using a cyclic learning rate, be sure that the learning rate is at it‚Äôs lowest point when you have finished training. . Manually init layers . . Pytorch will automatically initialize layers for you, but depending on your activation function, you might want to use the correct gain for your activation function. Take a look at the pytorch documentation for more information. . Mixed/half precision training . . Mixed or half precision training lets you train on larger batch sizes and can speed up your training. Take a look at this if you want to simply use half precision training. . What is the difference between mixed and half precision training? . . Nvidia‚Äôs Volta and Turing GPUs contain tensor cores that can do fast fp16 matrix multiplications and significantly speed up your training. . ‚ÄúTrue‚Äù half precision training casts the inputs and the model‚Äôs parameters to 16 bit floats and computes everything using 16 bit floats. The advantages of this are that fp16 floats only use half the amount of vram as normal fp32 floats, letting you double the batch size while training. This is the fastest and most optimized way to take advantage of tensor cores, but comes at a cost. Using fp16 floats for the model‚Äôs parameters and batch norm statistics means that if the gradients are small enough, they can underflow and be replaced by zeros. . Mixed precision solves these problems by keeping a master copy of the model‚Äôs parameters in 32 bit floats. The inputs and the model‚Äôs parameters are still cast to fp16, but after the backwards pass, the gradients are copied to the master copy and cast to fp32. The parameters are updated in fp32 to prevent gradients from underflowing, and the new, updated master copy‚Äôs parameters are cast to fp16 and copied to the original fp16 model. Nvidia‚Äôs apex library recommends using mixed precision in a different way by casting inputs to tensor core-friendly operations to fp16 and keeping other operations in fp32. Both of these mixed precision approaches have an overhead compared to half precision training, but are faster and use less vram than fp32 training. . Take a look at (https://medium.com/huggingface/training-larger-batches-practical-tips-on-1-gpu-multi-gpu-distributed-setups-ec88c3e51255) for more information. . Apex won‚Äôt install on GCP‚Äôs deep learning vm . . This is a known issue with apex, take a look at (https://github.com/NVIDIA/apex/issues/259) for some possible solutions. . Resources . . If you‚Äôre using pytorch, Nvidia‚Äôs apex library (https://docs.nvidia.com/deeplearning/sdk/mixed-precision-training/index.html) is the easiest way to start using mixed precision. If you want to read more about half and mixed precision training, take a look at https://forums.fast.ai/t/mixed-precision-training/20720 . gradient accumulation . . If you want to train larger batches on a gpu without enough vram, gradient accumulation can help you out. . The basic idea is this: call optimizer.step() every n minibatches, accumulating the gradients at each minibatch, effectively training on a minibatch of size batch_size x n. . Here‚Äôs a example showing how you could use gradient accumulation in pytorch, from (https://gist.github.com/thomwolf/ac7a7da6b1888c2eeac8ac8b9b05d3d3#file-gradient_accumulation-py): . model.zero_grad() # Reset gradients tensors for i, (inputs, labels) in enumerate(training_set): predictions = model(inputs) # Forward pass loss = loss_function(predictions, labels) # Compute loss function loss = loss / accumulation_steps # Normalize our loss (if averaged) loss.backward() # Backward pass if (i+1) % accumulation_steps == 0: # Wait for several backward steps optimizer.step() # Now we can do an optimizer step model.zero_grad() # Reset gradients tensors if (i+1) % evaluation_steps == 0: # Evaluate the model when we... evaluate_model() # ...have no gradients accumulated . If you want to read more about gradient accumulation, check out this blog post (https://medium.com/huggingface/training-larger-batches-practical-tips-on-1-gpu-multi-gpu-distributed-setups-ec88c3e51255) . multi gpu/machine training . . If you have multiple gpus, you can easily convert your current code to train your model on multiple gpus. Just follow the official tutorials on pytorch.org (https://pytorch.org/tutorials/beginner/blitz/data_parallel_tutorial.html). The only problem with this is that Pytorch‚Äôs build in DataParallel will gather the outputs from all the other gpus to gpu 1 to compute the loss and calculate gradients, using up more vram. There is an alternative to this though, just use this alternative balanced data parallel implementation (https://gist.github.com/thomwolf/7e2407fbd5945f07821adae3d9fd1312). . Take a look at (https://medium.com/huggingface/training-larger-batches-practical-tips-on-1-gpu-multi-gpu-distributed-setups-ec88c3e51255#) for more information about multi gpu and distributed training. . determinism . . Pytorch will give you different results every time you run a script unless you set random seeds for python, numpy, and pytorch. Fortunately, doing this is very simple and only requires you to add a few lines to the top of each python file. There is a catch though, setting torch.backends.cudnn.deterministic to True will slightly slow down your network. . SEED = 42 np.random.seed(SEED) torch.manual_seed(SEED) torch.cuda.manual_seed(SEED) torch.backends.cudnn.deterministic = True . If you want a simple one-line way to do this, check out my pytorch_zoo library on github (https://github.com/bkkaggle/pytorch_zoo#seed_environmentseed42). . from pytorch_zoo.utils import seed_environment seed_environment(42) . If you want more information on determinism in pytorch, take a look at these links: . https://discuss.pytorch.org/t/how-to-get-deterministic-behavior/18177/7 | https://www.kaggle.com/c/quora-insincere-questions-classification/discussion/72770 | https://www.kaggle.com/bminixhofer/deterministic-neural-networks-using-pytorch | https://www.kaggle.com/c/quora-insincere-questions-classification/discussion/72040 | . . Initialization . Take a look at my post for more information. . . Normalization . Take a look at my post for an overview. . . Batch norm . . The original batch normalization paper put the batch norm layer before the activation function, recent research shows that putting the batch norm layer after the activation gives better results. A great article on batch norm and why it works can be found here (https://blog.paperspace.com/busting-the-myths-about-batch-normalization/). . You can‚Äôt use a batch size of 1 with batch norm . . Batch norm relies on the mean and variance of all the elements in a batch, it won‚Äôt work if you‚Äôre using a batch size of one while training, so either skip over any leftover batches with batch sizes of 1 or increase the batch size to atleast 2. . Be sure to use model.eval() with batch norm . . Run model.eval() before your validation loop to make sure pytorch uses the running mean and variance calculated over the training set. Also make sure to call model.train() before your training loop to start calculating the batch norm statistics again. You can read more about this at (https://discuss.pytorch.org/t/what-does-model-eval-do-for-batchnorm-layer/7146) . Resources . . http://mlexplained.com/2018/11/30/an-overview-of-normalization-methods-in-deep-learning/ is a really good blog post on the different types of normalizations and when to them. . . Common errors . . Pytorch . . Losses . . cross_entropy vs nll loss for multi-class classification . . Either pass the logits for a multi-class classification task to log_softmax first, then through the nll loss or pass the logits directly to cross_entropy. They will give you the same result, but cross_entropy is more numerically stable. Use softmax separately to convert logits into probabilities for prediction or for calculating metrics. Take a look at (https://sebastianraschka.com/faq/docs/pytorch-crossentropy.html) for more information. . binary_cross_entropy vs binary_cross_entropy_with_logits for binary classification tasks . . Either pass the logits for a binary classification task to sigmoid first, then through binary_cross_entropy or pass the logits directly to binary_cross_entropy_with_logits. Just as the example above, they will give you the same result, but binary_cross_entropy is more numerically stable. Use sigmoid separately to conver the logits into probabilities for prediction or for calculating metrics. Again, take a look at (https://sebastianraschka.com/faq/docs/pytorch-crossentropy.html) for more information. . Binary classification vs multi-class classification . . A binary classification task can also be represented as a multi-class classification task with two classes, positive and negative. They will give you the same result and should be numerically identical. . Here‚Äôs an example, taken from (https://sebastianraschka.com/faq/docs/pytorch-crossentropy.html), on how you could do this: . &gt;&gt;&gt; import torch &gt;&gt;&gt; labels = torch.tensor([1, 0, 1], dtype=torch.float) &gt;&gt;&gt; probas = torch.tensor([0.9, 0.1, 0.8], dtype=torch.float) &gt;&gt;&gt; torch.nn.functional.binary_cross_entropy(probas, labels) tensor(0.1446) &gt;&gt;&gt; labels = torch.tensor([1, 0, 1], dtype=torch.long) &gt;&gt;&gt; probas = torch.tensor([[0.1, 0.9], ... [0.9, 0.1], ... [0.2, 0.8]], dtype=torch.float) &gt;&gt;&gt; torch.nn.functional.nll_loss(torch.log(probas), labels) tensor(0.1446) . . Pin memory in the dataloader . . Set pin_memory to true in your dataloader to speed up transferring your data from cpu to gpu. Take a look at this for more information (https://discuss.pytorch.org/t/when-to-set-pin-memory-to-true/19723). . model.eval() vs torch.no_grad() . . model.eval() will switch your dropout and batch norm layers to eval mode, turning off dropout and using the running mean and stddev for the batch norm layers. torch.no_grad() will tell pytorch to stop tracking operations, reducing memory usage and speeding up your evaluation loop. To use these properly, run model.train() before each training loop, run model.eval() before each evaluation loop, and wrap your evaluation loop with with torch.no_grad(): Take a look at this for more information (https://discuss.pytorch.org/t/model-eval-vs-with-torch-no-grad/19615/11). . What to use for num_workers in the dataloader . . If your gpu utilization fluctuates a lot and generally remains low (&lt; 90%), this might mean that your gpu is waiting for the cpu to finish processing all the elements in your batch and that num_workers might be your main bottleneck. num_workers in the dataloader is used to tell pytorch how many parallel workers to use to preprocess the data ahead of time. Set num_workers to the number of cores that you have in your cpu. This will fully utilize all your cpu cores to minimize the amount of time the gpu spends waiting for the cpu to process the data. If your gpu utilization still remains low, you should get more cpu cores or preprocess the data ahead of time and save it to disk. Take a look at these articles for more information: (https://discuss.pytorch.org/t/guidelines-for-assigning-num-workers-to-dataloader) and (https://stanford.edu/~shervine/blog/pytorch-how-to-generate-data-parallel). . Tensorboard . . Tensorboard is really useful when you want to view your model‚Äôs training progress in real time. Now that Pytorch 1.1 is out, you can now log metrics directly to tensorboard from Pytorch. . How to use it . . Follow these instructions for a quickstart (https://pytorch.org/tutorials/intermediate/tensorboard_tutorial.html). . Use Tensorboard in a kaggle kernel . . Just copy this code snippet into a cell at the top of your kernel . !mkdir logs get_ipython().system_raw(&#39;tensorboard --logdir ./logs --host 0.0.0.0 --port 6006 &amp;&#39;) !ssh -o &quot;StrictHostKeyChecking no&quot; -R 80:localhost:6006 serveo.net . I also have another quickstart at my pytorch_zoo repository. . What do all the Tensorboard histograms mean? . . Take a look at these stackoberflow posts: . https://stackoverflow.com/questions/42315202/understanding-tensorboard-weight-histograms | https://stackoverflow.com/questions/38149622/what-is-a-good-explanation-of-how-to-read-the-histogram-feature-of-tensorboard | . . Common errors . . RuntimeError: one of the variables needed for gradient computation has been modified by an inplace operation . . In place operations and operations on slices of tensors can cause problems with Pytorch‚Äôs autograd. To fix this, convert your inplace operation, x[:, 0, :] += 1, to a non inplace operation, x[:, 0, :] = x[:, 0, :].clone() + 1, and use .clone() to avoid problems with operations on tensor slices. Take a look at (https://discuss.pytorch.org/t/encounter-the-runtimeerror-one-of-the-variables-needed-for-gradient-computation-has-been-modified-by-an-inplace-operation/836) for more information. . Creating MTGP constants failed error . . This error happens when ‚Äúusing an embedding layer and passing out of range indexes (indexes &gt; num_embeddings)‚Äù from (https://discuss.pytorch.org/t/solved-creating-mtgp-constants-failed-error/15084/4). For more information, take a look at (https://discuss.pytorch.org/t/solved-creating-mtgp-constants-failed-error/15084). . ValueError: Expected more than 1 value per channel when training . . This error happens when you‚Äôre using a batch size of 1 while training with batch norm. Batch norm expects to have a batch size of at least 2. For more information, take a look at (https://github.com/pytorch/pytorch/issues/4534) . . How to . . How to implement gradient clipping . . Here‚Äôs the code for gradient clipping: . torch.nn.utils.clip_grad_norm(model.parameters(), value) . If you want to read more about gradient clipping in pytorch, take a look at (https://discuss.pytorch.org/t/proper-way-to-do-gradient-clipping/191). . How to implement global max/avg pooling . . Follow the instructions from (https://discuss.pytorch.org/t/global-max-pooling/1345/2) . How to release gpu memory . . There is no simple way to do this, but you can release as much memory as you can by running torch.cuda.empty_cache(). Take a look at (https://discuss.pytorch.org/t/how-can-we-release-gpu-memory-cache/14530) for more information. . How to concatenate hidden states of a bidirectional lstm . . Follow the instructions from (https://discuss.pytorch.org/t/concatenation-of-the-hidden-states-produced-by-a-bidirectional-lstm/3686/2). . Torchtext . . Torchtext is Pytorch‚Äôs official NLP library, The library‚Äôs official docs are the best way to get started with the library, but are a bit limited and there are some blog posts that help you get a better sense of how to use the library: . https://pytorch.org/tutorials/beginner/torchtext_translation_tutorial.html | https://pytorch.org/tutorials/beginner/text_sentiment_ngrams_tutorial.html | https://pytorch.org/tutorials/beginner/transformer_tutorial.html | http://anie.me/On-Torchtext/ | http://mlexplained.com/2018/02/08/a-comprehensive-tutorial-to-torchtext/ | http://mlexplained.com/2018/02/15/language-modeling-tutorial-in-torchtext-practical-torchtext-part-2/ | https://towardsdatascience.com/use-torchtext-to-load-nlp-datasets-part-i-5da6f1c89d84 | https://towardsdatascience.com/use-torchtext-to-load-nlp-datasets-part-ii-f146c8b9a496 | https://pytorch.org/tutorials/beginner/torchtext_translation_tutorial.html | . . Sort batches by length . . Your recurrent models will train best if all the examples in a batch have similar lengths. Since all the examples in a batch are padded with zeros to the length of the longest example, grouping examples with identical or similar lengths will make your model more efficient and waste less of the GPU‚Äôs memory. Use the iterator‚Äôs sort_key attribute to tell it to group examples of similar lengths into each batch. If you‚Äôre using pack_padded_sequence, set sort_within_batch to True since pack_padded_sequence expects examples in a batch to be in ascending order. Take a look at this for more information. . https://github.com/pytorch/text/issues/303 | . . Pretrained embeddings . . If you want to use a pretrained embedding like word2vec or glove, you will have to load in the pretrained vectors and update the field‚Äôs vectors. . # Load in the vectors vectors = torchtext.vocab.Vectors(&#39;/path/to/vectors&#39;) # Create the text field text_field = data.Field(tokenize=tokenizer, lower=True, batch_first=True, include_lengths=True) # Built the vocab for the field using the train dataset text_field.build_vocab(train_dataset) # Set the vectors of the field to be the pretrained vectors text_field.vocab.set_vectors(vectors.stoi, vectors.vectors, vectors.dim) . Take a look at this for more information. . Serializing datasets . . If you‚Äôre working with large datasets that take time to load and process, being able to serialize and save processed datasets to disk is a really nice feature. Unfortunately, this feature is still a work in progress (the issue was created in 2017, and there doesn‚Äôt seem to be that much work being done on torchtext as of late 2019), so the only way to do this at the moment is to follow this article. . Kaggle . . Here are some of tips and tricks I picked up while participating in kaggle competitions. . Tips . . Trust your local validation . . Your score on your local validation set should be the most important, and sometimes the only, metric to pay attention to. Creating a validation set that you can trust to tell you whether you are or are not making progress is very important. . Optimize for the metric . . The goal of kaggle competitions is to get the highest (or lowest, depending on the metric) score on a specific metric. To do this, you might need to modify your model‚Äôs loss function. For example, if the competition metric penalizes mistakes on rare classes more than common classes, oversampling or weighting the loss in favor of those classes can force the model to optimize for that metric. . Something that works for someone might not work for you . . Just because someone says on the discussion forum that a particular technique or module works better for them doesn‚Äôt automatically mean that it will work for you. . Tricks . . Removing negative samples from a dataset is equivalent to loss weighting . . This usually works well and is easier to do than loss weighting. . Thresholding . . Using the optimal threshold on a dataset can lead to brittle results . . If you choose thresholds for (binary) classification problems by choosing whatever value gives you the optimal score on a validation set, the threshold might be overfitting to the specific train-val split or to the specific architecture/hyperparameters. This can have two effects. First, the optimial threshold you found on the val set might not be the optimal threshold on the held out test set, decreasing your score. Second, this makes comparing results between runs with different model architectures or hyperparameters more difficult. Using different thresholds means that a model that is actually worse might get a higher score than a better model if you find a ‚Äòlucky‚Äô threshold. . Shakeup . . Shakeup prediction is a powerful tool to predict the likely range of scores for your model when evaluated on an unknown test set. It was first introduced by the winner of a kaggle competition as a way to stabilize his models in (https://www.kaggle.com/c/planet-understanding-the-amazon-from-space/discussion/36809). It has also been used here and here. . Encoding categorical features . . Encoding categorical features is a pretty important thing to do when working with tabular data. . Some resources I found for this are: . https://www.kaggle.com/c/microsoft-malware-prediction/discussion/79045 | https://www.kaggle.com/vprokopev/mean-likelihood-encodings-a-comprehensive-study | https://www.kaggle.com/tnarik/likelihood-encoding-of-categorical-features | https://www.kaggle.com/c/microsoft-malware-prediction/discussion/76668 | . Optimizing code . . Save processed datasets to disk . . As long as your dataset isn‚Äôt too large, saving the processed dataset to disk as a .pkl file, then loading it in whenever you need to use it, will save you time and will help increase your GPU utilization. . Use multiprocessing . . Python‚Äôs multiprocessing library can help you take full advantage of all the cores in your CPU. . Data Leaks . . Finding leaks in a dataset is a difficult, but sometimes useful skill. . Some good examples of how kagglers found leaks are: . https://www.kaggle.com/raddar/towards-de-anonymizing-the-data-some-insights | https://www.kaggle.com/cpmpml/raddar-magic-explained-a-bit/ | . Tools . . https://github.com/mxbi/mlcrate | https://github.com/bkkaggle/pytorch_zoo (I made this) | . . CTR (Click Through Rate prediction) tools . https://github.com/guoday/ctrNet-tool | https://www.kaggle.com/c/avazu-ctr-prediction/discussion/10927 | https://www.kaggle.com/c/microsoft-malware-prediction/discussion/75149 | https://www.kaggle.com/scirpus/microsoft-libffm-munger | https://www.kaggle.com/c/talkingdata-adtracking-fraud-detection/discussion/56497#331685 | . . FTRL (Follow The Regularized Leader) . https://www.kaggle.com/c/microsoft-malware-prediction/discussion/75246 | . . Ensembling . Correlation . . Ensembling models with low correlations is better than ensembling models with high correlations. . More information can be found here: . https://www.kaggle.com/c/microsoft-malware-prediction/discussion/80368 | https://www.kaggle.com/c/jigsaw-toxic-comment-classification-challenge/discussion/51058 | . . Semantic segmentation . . Some good resources for semantic segmentation include: . http://blog.qure.ai/notes/semantic-segmentation-deep-learning-review | https://tuatini.me/practical-image-segmentation-with-unet/ | https://www.jeremyjordan.me/semantic-segmentation/#loss | https://becominghuman.ai/investigating-focal-and-dice-loss-for-the-kaggle-2018-data-science-bowl-65fb9af4f36c | . . NLP . . Take a look at some of these blog posts: . http://ruder.io/a-review-of-the-recent-history-of-nlp/ | https://medium.com/huggingface/learning-meaning-in-natural-language-processing-the-semantics-mega-thread-9c0332dfe28e | https://medium.com/huggingface/100-times-faster-natural-language-processing-in-python-ee32033bdced | . . awd-LSTM . Take a look at these links: . https://github.com/salesforce/awd-lstm-lm | https://www.fast.ai/2017/08/25/language-modeling-sota/ | . . Multitask learning . Take a look at these links: . http://ruder.io/multi-task/ | http://ruder.io/multi-task-learning-nlp/ | . . Combine pretrained embeddings . Adding/concatenating/(weighted) averaging multiple pretrained embeddings almost always leads to a boost in accuracy. . . Reinitialize random embedding matrices between models . Initializing embeddings for unknown words randomly helps increase the diversity between models. . From: (https://www.kaggle.com/c/quora-insincere-questions-classification/discussion/79720) . Try out dropout or gaussian noise after the embedding layer . . It can help increase model diversity and decrease overfitting . Correctly use masking with softmax . . Use dynamic minibatches when training sequence models . . Using this will try to create batches of examples with equal lengths to minimize unncessary padding and wasted calculations. The code to use this is available at (https://www.kaggle.com/c/jigsaw-unintended-bias-in-toxicity-classification/discussion/94779) . Reduce the amount of OOV (Out Of Vocabulary) words . . Creating a vocabulary on the train, val sets between folds can lead to information being leaked and artificially increasing your score . . https://www.kaggle.com/c/quora-insincere-questions-classification/discussion/79556 | . . How to use pad_packed_sequence and pack_padded_sequence . Take a look at these links: . https://discuss.pytorch.org/t/packedsequence-for-seq2seq-model/3907 | https://discuss.pytorch.org/t/solved-multiple-packedsequence-input-ordering/2106/7 | . . Transformers . Take a look at these links: . https://blog.floydhub.com/the-transformer-in-pytorch/ | http://www.wildml.com/2016/01/attention-and-memory-in-deep-learning-and-nlp/ | https://jalammar.github.io/illustrated-transformer/ | . . Gradient boosting . How to set hyperparameters . . Laurae‚Äôs website is the best place to understand what parameters to use and what values to set them to. . Resources . . https://www.kaggle.com/c/microsoft-malware-prediction/discussion/78253 | http://mlexplained.com/2018/01/05/lightgbm-and-xgboost-explained | https://xgboost.readthedocs.io/en/latest/tutorials/model.html | https://lightgbm.readthedocs.io/en/latest/ | https://xlearn-doc.readthedocs.io/en/latest/index.html | https://catboost.ai/docs/ | . Setting up your environment . . Jupyter notebooks . . https://stackoverflow.com/questions/43759610/how-to-add-python-3-6-kernel-alongside-3-5-on-jupyter | https://forums.fast.ai/t/jupyter-notebook-keyerror-allow-remote-access/24392 | . . Python 3.6+ . https://www.rosehosting.com/blog/how-to-install-python-3-6-4-on-debian-9/ | . . Conda . https://conda.io/projects/conda/en/latest/user-guide/tasks/manage-environments.html#activating-an-environment | https://stackoverflow.com/questions/35245401/combining-conda-environment-yml-with-pip-requirements-txt | https://stackoverflow.com/questions/42352841/how-to-update-an-existing-conda-environment-with-a-yml-file | . . Build your own library . I recently built my own machine learning library, here are some of the resources I used: . https://medium.com/@florian.caesar/how-to-create-a-machine-learning-framework-from-scratch-in-491-steps-93428369a4eb | https://github.com/joelgrus/joelnet | https://medium.com/@johan.mabille/how-we-wrote-xtensor-1-n-n-dimensional-containers-f79f9f4966a7 | https://mlfromscratch.com | https://eisenjulian.github.io/deep-learning-in-100-lines/ | http://blog.ezyang.com/2019/05/pytorch-internals/ | . . Resources . Essential tools . . https://paperswithcode.com - This website lists available implementations of papers along with leaderboards showing which models are currently SOTA on a range of tasks and datasets | https://www.arxiv-vanity.com - This site converts PDF papers from Arxiv to mobile-friendly responsive web pages. | http://www.arxiv-sanity.com - This site is a better way to keep up to date with popular and interesting papers. | . . Model zoos . https://modelzoo.co/blog | https://modeldepot.io/search | https://github.com/sebastianruder/NLP-progress | . . Arxiv alternatives . https://www.arxiv-vanity.com | http://www.arxiv-sanity.com | https://www.scihive.org | . . Machine learning demos . https://ganbreeder.app | https://talktotransformer.com | https://transformer.huggingface.co | https://www.nvidia.com/en-us/research/ai-playground/ | https://alantian.net/ganshowcase/ | https://rowanzellers.com/grover/ | http://nvidia-research-mingyuliu.com/gaugan/ | http://nvidia-research-mingyuliu.com/petswap/ | . . Link aggregators . https://news.ycombinator.com | https://www.sciencewiki.com | https://git.news/?ref=producthunt | . . Machine learning as a service . https://runwayml.com | https://supervise.ly | . . Coreml . https://developer.apple.com/machine-learning/models/ | https://github.com/huggingface/swift-coreml-transformers | https://www.fritz.ai | . . Courses . https://fast.ai | https://www.coursera.org/learn/competitive-data-science | https://www.deeplearning.ai | https://www.kaggle.com/learn/overview | . . Miscelaneous . https://markus-beuckelmann.de/blog/boosting-numpy-blas.html | https://github.com/Wookai/paper-tips-and-tricks | https://github.com/dennybritz/deeplearning-papernotes | https://github.com/HarisIqbal88/PlotNeuralNet | . . Contributing . I‚Äôve tried to make sure that all the information in this repository is accurate, but if you find something that you think is wrong, please let me know by opening an issue. . This repository is still a work in progress, so if you find a bug, think there is something missing, or have any suggestions for new features, feel free to open an issue or a pull request. Feel free to use the library or code from it in your own projects, and if you feel that some code used in this project hasn‚Äôt been properly accredited, please open an issue. . . Authors . Bilal Khan | . . License . This project is licensed under the CC-BY-SA-4.0 License - see the license file for details . . Acknowledgements . k88hudson - Parts of https://github.com/k88hudson/git-flight-rules were used in this repository | . This repository was inspired by https://github.com/k88hudson/git-flight-rules and copied over parts of it .",
            "url": "https://bkkaggle.github.io/blog/ai/2020/07/13/ml-flight-rules.html",
            "relUrl": "/ai/2020/07/13/ml-flight-rules.html",
            "date": " ‚Ä¢ Jul 13, 2020"
        }
        
    
  
    
        ,"post7": {
            "title": "Gpu Memory Usage",
            "content": ". Purpose . . The purpose of these series of blog posts is to be a place to store my (still in-progress!) notes about topics in learning, help me keep track of everything I‚Äôve learned over the last three years, and to practice my Latex skills. . This is my fourth blog post in the series, and this time I‚Äôm (again) really just Cmd+C‚Äôing and Cmd+V‚Äôing over some of my notes on memory usage in neural networks . . Background . . GPU memory is used in a few main ways: . Memory to store the network‚Äôs parameters | Memory to store the network‚Äôs gradients | Memory to store the activations of the current batch | Memory used by optimizers (momentum, adam, etc) that stores running averages | . . Parameter memory . . Parameter memory usage depends on two things: The number of parameters and the amount of bytes used for each parameter. . Float 32 =&gt; 4 bytes | Float 16 =&gt; 2 bytes | . You can calculate parameter memory with the formula: . parameter_memory = n_parameters * bytes_per_parameter . . Optimizer memory . ‚Äì . SGD doesn‚Äôt store any extra memory | Momentum doubles parameter memory usage by storing one momentum parameter per parameter in a model | Adam stores 2 momenum parameters so Adam uses 3x the parameter memory of SGD | . Adafactor: . By default adafactor uses n+m memory to store momentum parameters for a nxm matrix | If you enable Beta_1, it will be like using momentum + n+m memory, so a little more than 2x SGD | .",
            "url": "https://bkkaggle.github.io/blog/2020/07/06/gpu-memory-usage.html",
            "relUrl": "/2020/07/06/gpu-memory-usage.html",
            "date": " ‚Ä¢ Jul 6, 2020"
        }
        
    
  
    
        ,"post8": {
            "title": "Initialization",
            "content": ". Purpose . . The purpose of these series of blog posts is to be a place to store my (still in-progress!) notes about topics in learning, help me keep track of everything I‚Äôve learned over the last three years, and to practice my Latex skills. . This is my third blog post in the series, and this time I‚Äôm really just Cmd+C‚Äôing and Cmd+V‚Äôing over some of my notes on initialization for neural networks . . Notation . . $ mu$: Mean | $ sigma ^ 2$: Standard Deviation | $c_{in}$: Number of input channels to a layer | $c_{out}$: Number of output channels to a layer | . . Initialization . . $ mu$ and $ sigma ^ 2$ of activations should be close to $0$ and $1$ to prevent the gradients from exploding or vanishing | activations of layers have $ sigma ^ 2$ close to $ sqrt {c_{in}}$ | so, to get the $ sigma ^ 2$ back to $1$, multiply randomly initialized weights by $1 / sqrt(c_{in})$ | this works well without activations, but results in vanishing or exploding gradients when used with a tanh or sigmoid activation function | bias weights should be initialized to $0$ | intializations can either be from a uniform distribution or a normal distribution | use Xavier Initialization for sigmoid and softmax activations | use Kaiming Initialization for ReLU or Leaky ReLU activations | . . Xavier or Glorot Initialization . . Uniform initialization: . . bound a uniform distribution between $ pm sqrt { frac {6} {c_{in} + c_{out}}}$ | . . Normal initialization: . . multiply a normal distribution by $ sqrt frac {2} {c_{in} + c_{out}}$ | or create a normal distribution with $ mu = 0$ and $ sigma ^ 2 = sqrt frac {2} {c_{in} + c_{out}}$ | helps keep identical variances across layers | . . Kaiming or He initialization . . when using a ReLU activation, $ sigma ^ 2$ will be close to $ sqrt frac {c_{in}} {2}$, so multiplying the normally distributed activations by $ sqrt frac {2} {c_{in}}$ will make the activations have a $ sigma ^ 2$ close to $1$ | . . Uniform initialization: . . bound a uniform distribution between $ pm sqrt frac {6} {c_{in}}$ | . . Normal initialization . . multiply a normal distribution by $ sqrt frac {2} {c_{in}}$ | or create a normal distribution with $ mu = 0$ and $ sigma ^ 2 = sqrt frac {2} {c_{in}}$ | . . Gain . . multiplied to init bounds/stddevs | $ sqrt 2$ for ReLU | none for Kaiming | . . Pytorch defaults . . most layers are initialized with Kaiming uniform as a reasonable default | use Kaiming with correct gain (https://pytorch.org/docs/stable/nn.html#torch.nn.init.calculate_gain) | . . Resources . . https://github.com/pytorch/pytorch/issues/15314 | https://medium.com/@sakeshpusuluri123/activation-functions-and-weight-initialization-in-deep-learning-ebc326e62a5c | https://pytorch.org/docs/stable/_modules/torch/nn/init.html | https://discuss.pytorch.org/t/whats-the-default-initialization-methods-for-layers/3157/21 | https://towardsdatascience.com/weight-initialization-in-neural-networks-a-journey-from-the-basics-to-kaiming-954fb9b47c79 | https://towardsdatascience.com/hyper-parameters-in-action-part-ii-weight-initializers-35aee1a28404 | https://pytorch.org/docs/stable/nn.html#torch.nn.init.calculate_gain | https://github.com/mratsim/Arraymancer/blob/master/src/nn/init.nim | https://jamesmccaffrey.wordpress.com/2018/08/21/pytorch-neural-network-weights-and-biases-initialization/ | .",
            "url": "https://bkkaggle.github.io/blog/notes/2020/07/03/initialization.html",
            "relUrl": "/notes/2020/07/03/initialization.html",
            "date": " ‚Ä¢ Jul 3, 2020"
        }
        
    
  
    
        ,"post9": {
            "title": "Algpt2 Part 1",
            "content": ". Part 1: Best Practices for Finetuning Large Transformer Language models . Part 2: How I (almost) replicated OpenAI‚Äôs GPT-2 (124M version) . Background . . A few months ago I started working on a research project on how to best finetune GPT2-like language models for text generation. Once I ran a few experiments on that, I wanted to expand the scope of the project and try to pretrain my own, more efficient language model from scratch. I got access to a 128-core TPUv3 pod from the Tensorflow Reseach Cloud and used it to pretrain GPT2-124M to a perplexity pretty close to OpenAI‚Äôs results (my pretrained model used was trained for about $1/8$th of the number of iterations that OpenAI trained their model for and got $21$ ppl on OpenWebText compared to $17$ ppl for OpenAI‚Äôs model), and then pretrained an ALBERT-style GPT2 (that I‚Äôm calling ALGPT2) language model with a factorized input embedding and parameter sharing that would reduce the number of paramters from 124M to around 12M. . Unfortunately, ALGPT2 doesn‚Äôt generate coherent, natural sounding text as well as GPT2 (ALGPT2 gets $31$ ppl on OpenWebText compared to $21$ ppl for my pretrained GPT2 model), but I‚Äôm writing this series of blog posts to go through everything I‚Äôve learned over the last few months. . I have a cleaned-up version of my codebase on Github here, and my original codebase with all my notes here. . You can take a look at my Weights&amp;Biases workspace with all my runs here. . . Objectives . . I don‚Äôt usually have access to a lot of compute (I mostly just use Google Colab) so I started out by limiting the scope of my project to finetuning or running inference on GPT2. I wrote down a few notes on what I wanted to look into: . . If I wanted to finetune a LM to generate text of a specific style/content, what good defaults would I choose? | Find best practices or good defaults for finetuning tranformer language models for text generation. | Understand the effect of context len, model, and dataset size on generating coherent text | . . Data . . I ran most of the finetuning experiments on WikiText-2, which was small enough (~10mb on disk with a total of ~2m words) that I could run experiments fast enough (usually within 5-10m) on the v100 or p100 that I usually got through Colab. . I also ran a few experiments using WikiText-103 (~500mb, 100m words) but these were a lot harder to do because the size of the dataset forced me to use smaller batch sizes which took too long. . Loading in larger datasets (like WikiText-103) into memory can become pretty inefficient because of Python‚Äôs overhead. IIRC, if you want to load the entire WikiText-103 train set into memory with Python and tokenize the whole thing in one go using Huggingface‚Äôs Tokenizers library and the GPT2 byte-level BPE tokenizer, it takes about 10 minutes and uses up about 60GB of RAM (Most of the time is spent tokenizing and most of the RAM is used loading the file into memory). Using something like Apache Arrow like the Huggingface NLP library should make this a whole lot more efficient. . The WikiText datasets are stored as a single text file, with one Wikipedia article per line. Another more efficient way of processing the data would be to load in the file line-by-line and tokenize each line in parallel using the Huggingface tokenizer library‚Äôs batch_encode_plus() function. This is a lot faster and efficient (taking up only 2GB of RAM and 2 minutes) but has its own drawbacks. batch_encode_plus() truncates sequences beyond that have more than context_len tokens and leaves sequences that are smaller than context_len as is, which means that you need to zero-pad the sequences that are smaller than context_len and discard any portion of a sequence beyond the first context_len tokens. For datasets that are used to benchmark the performance of a wide range of language models, this can lead to your model being harder to compare against other models that follow the commonly used convention of just tokenizing the entire dataset and chunking it into sequences of context_len length. . I wanted to make sure the way that I preprocessed the data made sure that the models that I finetuned on WikiText-2 and WikiText-103 would be comparable to other models, so in my code, I load in the entire dataset, tokenize it, and split it into contigous sequences of length context_len. There are a few other preprocessing-related factors that can affect how comparable results between different models can be, I wrote a post on the topic a while ago, check it out if you‚Äôre interested. . . Frameworks . . I originally wrote all my code in vanilla Pytorch. I wanted to try using Colab‚Äôs free TPUv3 board that has 8 TPU cores each with 16GB of RAM, each of which is a little slower that a single V100. Using the entire TPU board should be at least as fast as using a cluster of 8 V100s but at a much lower cost. . I tried using Pytorch Lightning to see if it would help make the Pytorch model run on the Colab TPU more easily, but after about a week of trying to use the library I switched over to having two training scripts; One in plain Pytorch and one in Tensorflow2.0 with Keras ‚Äî Even though Pytorch Lightning was very well designed, the time and effort required to make sure the framework is working the way that I want wasn‚Äôt worth it in the end. . This was my first time working with TF/Keras since around early 2018 when I switched to Pytorch (back in the 0.3 days when you still had to use Variable). TF2.0 is a lot better now than it used to be two or three years ago but still doesn‚Äôt feel as intuitive or easy to use as Pytorch. The documentation looks pretty good at first glance but there were a lot of gaps in the documentation when I was trying to figure out how to write and decode TFRecord files and scale my Keras code to TPUs and TPU pods. . Trying to get gradient accumulation to work with TPUs was especially hard, IIRC grad accumulation isn‚Äôt natively supported in Keras but there are a lot of independent implementations that people have open-sourced on Github, but they didn‚Äôt work well with TPUs. . I used the Huggingface/Transformers repository for the GPT-2 model and Weights&amp;Biases to track all the experiments that I ran. . Fun fact, I ran into a problem with Colab‚Äôs TPU a couple of times where I was silently downgraded from a TPUv3 to a TPUv2 and as a result I was getting a lot of OOM errors for a model and batch size that was working perfectly just a few hours ago. Colab doesn‚Äôt really advertise this and makes it almost impossible to know if you have been downgraded :( . Pytorch recently released Pytorch/XLA which is supposed to let you run Pytorch code on TPUs with only a few changes to your code. I spent quite a bit of time to try and make this work but using it is still a lot more complex than just using a GPU. . Pytorch/XLA is a lot slower on Colab, which probably has something to do with Colab‚Äôs network connection to the TPUs being a lot slower. Using some operations that aren‚Äôt supported by Pytorch/XLA can have a pretty drastic impact on the speed of your program, so if your code is running unusually slow on a TPU, unsupported ops are a common culprit. For example, I was trying to use the memory-saving Adafactor optimizer on Pytorch/XLA but since I was using a non-Pytorch operation in one part of the code (using Python‚Äôs sqrt() function instead of torch.sqrt()), a single iteration was taking ~10 seconds compared to 10 iterations/second for SGD. . TPU support for Pytorch works pretty differently from TPU support for Tensorflow. Each TPU has a powerful dedicated CPU and several 100GBs of RAM for data processing, so whenever you run TF code on a TPU, your data gets copied to each core‚Äôs CPU (unless you use TFRecord files, in which case each core‚Äôs CPU downloads and processes data directly from your cloud bucket) and gets processed there. By doing it in this way, you only need to rent a small cloud instance (like a n1-standard-1) and scaling your code from a single TPU board with 8 cores to a part of a TPU pod is (relatively) painless. . On the other hand, Pytorch/XLA can‚Äôt currently use the TPU‚Äôs CPU and instead has to replicate the data $8$ times on your own VM for an $8$ core TPU board. If you want to use Pytorch/XLA for a TPU pod, you have to create a VM group with one host VM for each $8$ core TPU board. This means that Pytorch/XLA isn‚Äôt currently practical for large scale training, but it looks like the next version of TPUs will be a lot more optimized for Pytorch. It works alright for a small dataset like WikiText-2 but when I tried finetuning on WikiText-103 (~500mb, 100m words) I needed to upgrade my VM to have 80+ GB of RAM. . . Finetuning . . I wasn‚Äôt able to finetune GPT2-1.5b on a TPU with the AdamW optimizer even with the TPU‚Äôs built in bfloat16 support, so most of the experiments that I ran were with the memory-saving Adafactor optimizer with beta1 set to zero to disable momentum. Enabling momentum might increase the performance of the Adafactor optimizer, but would also require storing an extra momentum value for each parameter and would make it harder to train larger models. . Fun fact: The AdamW optimizer implementation in Google‚Äôs official BERT repository excludes layernorm and bias parameters from weight decay and AFAICT is the only optimizer that does so. I tried running a few experiments with and without finetuning these parameters and didn‚Äôt find any significant difference in performance. . Most of the GPU experiments I did were with NVidia‚Äôs Apex library, with its $01$ mixed precision setting. I also tried running a few experiments on using only FP16, but the gradients would explode or vanish and the model wouldn‚Äôt train. . I have a forked version of Huggingface‚Äôs Transformers repository where I‚Äôve implemented gradient checkpointing for GPT-2. I haven‚Äôt been maintaining it but you can see all the changes that I did to make it work (it‚Äôs really only a few lines of code) here. I tried training GPT2-XL with grad checkpointing which IIRC worked with a smaller context length of 256 but still threw OOM errors when finetuning at a context length of 1024. . For small datasets like WikiText-2, (WikiText-2 consists of about 2 million words, so it‚Äôs actually on the larger size for datasets that you might collect yourself) the model usually overfits within the first 1-3 epochs, so most of the experiments that I did trained for a single epoch ‚Äî there really is no performance benefit to finetuning for any longer. I set the learning rate for all of my finetuning experiments to $5e-5$ (This was just the first value I tried, no hyperparameter tuning involved) and linearly increased the learning rate from $0$ to $5e-5$ over the first 10% of the training iterations and then linearly decayed it to zero over the rest of the training iterations. . Note: The Adafactor paper shows that warmup is strongly recommended to stabilize training, take a look at the paper for more details . If you want to finetune GPT2 on a dataset like WikiText-2, there‚Äôs a relationship between the batch size, learning rate, and the number of training iterations that you need to adjust to train effectively and avoid overfitting or plateauing. There‚Äôs a pretty important ratio that you need to keep constant between the batch size and the learning rate. A larger batch size means that there are fewer gradient updates performed if you keep the number of training iterations constant. . I have a WandB report showing a few different training runs on WikiText-2 with different sized GPT2 models and context lengths. The results aren‚Äôt really that surprising, finetuning larger models at larger context lengths increases perplexity significantly. . I wrote a quick Colab notebook on how to finetune and evaluate on WikiText-2. .",
            "url": "https://bkkaggle.github.io/blog/algpt2/2020/06/22/ALGPT2-part-1.html",
            "relUrl": "/algpt2/2020/06/22/ALGPT2-part-1.html",
            "date": " ‚Ä¢ Jun 22, 2020"
        }
        
    
  
    
        ,"post10": {
            "title": "Evaluating Language Models",
            "content": "Tl;dr . The way you evaluate your language model can have a pretty big effect on validation loss and ppl values. Everyone should clearly report how their language models have been evaluated and try to evaluate their language models similarly to make comparing them easy. . . This post is going to be a little different from my previous two posts, where I stuck to making posts to write down what I‚Äôve learned about ML. This time, I‚Äôm still making notes, but I‚Äôll also be writing about my work trying to replicate GPT-2‚Äôs zero-shot results on wikitext2 and wikitext103. . I‚Äôm currently working on finetuning gpt2-like models on small datasets and I wanted to compare the results of my finetuned models on wikitext2 to OpenAI‚Äôs baseline zero-shot results. This sounded like a pretty easy thing to do, but there are many ways that the authors of different papers choose to evaluate and compare their language models‚Äîand not all of them are easily comparable. . Different factors can have an impact on the val or test perplexity for a language model on a particular dataset‚ÄîThe vocabulary size of your language model, the context length that you use to evaluate on, and your evalutation method can all make a big difference. . . Vocabulary size . . The size of the input vocabulary for your language model can make it easier or harder for your language model to predict the next token in a sequence, for example, a character level language model with 26 tokens (one for each letter of the english alphabet) will have a lower perplexity that a word level language model with hundreds of thousands of tokens. Think of it like this, it‚Äôs a lot easier to predict the next letter in the sentence I‚Äôm a computer science and machine learning enthusias (which would be the letter t) than the next word in the sentence I&#39;m a computer science and machine learning (which is the word enthusiast). This would mean that a character-level language model would have a much lower perplexity value than a word-level model, and that you may be able to break SOTA on most language modelling datasets by just changing the vocabulary! . To make sure that models trained on using different tokenizers (word-level, character-level, BPE, etc) can be compared, you can normalize the loss of a language model with a vocabulary of $V_1$ tokens to a common vocabulary of $V_2$ tokens by multiplying the average loss of the language model with vocabulary size $V_1$ by the ratio between $V_1$ and $V_2$ (you could also sum the losses from the all the tokens and then divide by the number of tokens, but since the two give the identical result, I‚Äôll just refer to the version where we take the average loss): . normalized_loss=lossV1‚àóV1V2normalized _loss = loss_{V_1} * frac {V_1} {V_2}normalized_loss=lossV1‚Äã‚Äã‚àóV2‚ÄãV1‚Äã‚Äã . . Context Length and Evaluation Method . . Language models compute the probability of a sequence $s$ with $n$ tokens with: . P(s)=‚àèi=1np(wi‚à£w1...wi‚àí1)P(s) = prod_{i = 1}^{n} p(w_i | w_1 ... w_{i-1})P(s)=i=1‚àèn‚Äãp(wi‚Äã‚à£w1‚Äã...wi‚àí1‚Äã) . Datasets can have thousands to millions to hundreds of millions of tokens, so sending the entire dataset to the language model at once isn‚Äôt possible. To make the calculation of the loss and the perplexity computationally possible, there are two approaches that I‚Äôve seen other people use: . Splitting the dataset into chunks of length context_len, passing each chunk to the lm separately, and averaging the loss over all the chunks . | Using an overlapping sliding windows approach, still only passing chunks of length context_len to the model at a time, but overlapping $t$ tokens from the previous sequence and not counting these overlapped tokens when calculating the loss. . | Approach #1 is the easiest to implement (Like in the official Pytorch example, your dataset would just load in the validation text file, tokenize it, and break it up into context_len chunks to be iterated over) but isn‚Äôt optimal since the lm won‚Äôt have any context to use when predicting the first token in each batch. . This is also the approach taken by most tutorials and reference implementations for evaluating language models. For example, the Pytorch examples for word-level language modelling on wikitext-2 1, the AWD-LSTM repository 2, and the /transformers library‚Äôs language modelling example 3 all evaluate on fixed chunks of length context_len. . In contrast, approach #2 is used by Transformer-XL 4 and Megatron-LM 5 and is a little more difficult to implement, you still need to break the tokenized validation file into chunks of length context_len but only move the start of each chunk $t$ tokens ahead at a time. The value of $t$ that you choose will make a difference, if you priorize the precision of the resulting loss value and set $t = 1$, your loss will be closer to the true value over the dataset than if you choose $t = 30$ (like Megatron-LM), but using a lower value of $t$ will also increase the amount of time it will take to calculate the loss over the entire validation set, especially if it is very large. Using overlapping sliding windows also means that you will have to only count the loss of the non-overlapping segments, masking out the loss for the first $t$ tokens. The Transformer-XL 4 paper discusses this topic in section 3.1 and shows how its cached sequence of hidden states from previous timesteps lets it evaluate on overlapping sliding windows at a lower computational cost. . Whichever approach you choose, the value of context_len that you choose will also make a significant effect on your loss. On my experiments with gpt2, I could see a decrease of 4ppl across many model sizes (gpt2-medium, gpt2-large, gpt2-xl) just by increasing the context len that the models were evaluated on from 256 to 1024. . . GPT-2 and zero-shot results on wikitext2 and wikitext103 . . OpenAI‚Äôs GPT-2 6 paper is pretty short on details when it comes to how they ran zero-shot (no finetuning!) evaluation on a range of datasets and several people have also had some trouble trying to replicate their results. . model-size loss on wikitext103‚Äôs test set perplexity adjusted perplexity reported perplexities . gpt2 | 3.149 | 23.33 | 35.12 | 37.5 | . gpt2-medium | 2.923 | 18.59 | 27.18 | 26.37 | . gpt2-large | 2.786 | 16.23 | 23.30 | 22.05 | . gpt2-xl | 2.706 | 14.97 | 21.28 | 17.48 | . I was able to get these results on WikiText-103‚Äôs test set that are pretty close (except for gpt2-xl, that‚Äôs off by almost 4ppl) to the paper‚Äôs reported results after a bit of experimenting, here‚Äôs what I did: . For my zero-shot results, I used a non-overlapping context length of 1024 tokens (using overlapping sliding windows should get you better results and get you to OpenAI‚Äôs results). As for adjusting the loss to account for GPT-2‚Äôs custom tokenizer, I used the normalized loss calculation from above with the original and tokenized number of tokens from the test file‚ÄîI split the preprocessed test set on spaces to get $217646$ tokens, and with GPT-2‚Äôs tokenizer to get $249612$ tokens. . OpenAI says in section 3.1 that they used invertible detokenizers to remove tokenization artifacts from the processed WikiText-103 test set (wiki.test.tokens) (like extra spaces before and after punctuation marks) created by the original authors of the dataset. Since they didn‚Äôt provide details on what preprocessing artifacts they removed in either the paper or code, I used the Megatron-LM 5 project‚Äôs invertible detokenizers that they used for their own zero-shot evaluation results on WikiText-103. . . References . . https://github.com/pytorch/examples/blob/master/word_language_model/main.py#L136¬†&#8617; . | https://github.com/salesforce/awd-lstm-lm/blob/master/finetune.py#L104¬†&#8617; . | https://github.com/huggingface/transformers/blob/master/examples/run_language_modeling.py¬†&#8617; . | https://arxiv.org/abs/1901.02860¬†&#8617;¬†&#8617;2 . | https://arxiv.org/abs/1909.08053¬†&#8617;¬†&#8617;2 . | https://cdn.openai.com/better-language-models/language_models_are_unsupervised_multitask_learners.pdf¬†&#8617; . |",
            "url": "https://bkkaggle.github.io/blog/ml/nlp/2020/05/14/evaluating-language-models.html",
            "relUrl": "/ml/nlp/2020/05/14/evaluating-language-models.html",
            "date": " ‚Ä¢ May 14, 2020"
        }
        
    
  
    
        ,"post11": {
            "title": "Pytorch Zoo",
            "content": "I originally wrote this blog post for the PyTorch blog which is available here (Use this link to access my article with my friend link so you don‚Äôt need to worry about Medium paywalling my article) . . PyTorch Zoo is a collection of modules and utilities that I‚Äôve found to be useful when working on machine learning projects and competitions. PyTorch Zoo contains several modules not available in PyTorch, like cyclical momentum and squeeze-and-excitation, as well as useful utilities like the ability to send notifications and set random seeds to get consistent results. PyTorch Zoo is meant to provide high-quality reference implementations of modules that don‚Äôt have official implementations in PyTorch and save you time that would have otherwise been spent searching for implementations on Github or coding the module yourself. . . &lt;/img&gt; . From: https://github.com/bkkaggle/pytorch_zoo . . The library is open-source on Github and is available as a pip package. Just run: . pip install pytorch_zoo . to install it in your local development environment and check out the documentation for in-depth examples on all the library‚Äôs features. I‚Äôve included quite a few modules in PyTorch Zoo, so I‚Äôll try to focus only on some of the ones that I found to be the most interesting for this blog post. . . Cyclical Momentum . . Cyclical momentum, which was first proposed in the same paper as cyclical learning rates 1, is usually used together with cyclical learning rates. It decreases the amount of momentum while the learning rate increases and increases the amount of momentum while the learning rate decreases, stabilizing training and allowing for the use of higher learning rates. Here‚Äôs an example of how you could use cyclical momentum just like a normal PyTorch scheduler: . optimizer = torch.optim.SGD(model.parameters(), lr=0.1, momentum=0.9) scheduler = torch.optim.CyclicMomentum(optimizer) data_loader = torch.utils.data.DataLoader(...) for epoch in range(10): for batch in data_loader: scheduler.batch_step() train_batch(...) . . Squeeze and Excitation . . Squeeze and Excitation modules 2 3 can be easily integrated into existing models by just adding one of these modules after each convolutional block and improves the model‚Äôs performance without significantly impacting training time. All three variants of the squeeze-and-excitation block that were proposed in the original papers are available in PyTorch Zoo, see the documentation for specific examples on how to use each one. Here‚Äôs an example of how you could use SqueezeAndExcitation in a convolutional block . class Encoder(nn.Module): def __init__(self, in_ch, out_ch, r): super(Encoder, self).__init__() self.conv = nn.Conv2d(in_ch, out_ch, 3, padding=1) self.se = SqueezeAndExcitation(out_ch, r) def forward(self, x): x = F.relu(self.conv(x), inplace=True) x = self.se(x) return x . . Utilities . . PyTorch Zoo also has a small range of utilities to make it easier to follow PyTorch best practices when doing things like saving a model to disk and setting random seeds, as well as easy to use one-liners to do things like sending push notifications when a training run ends. . Here‚Äôs an example of how you could use some of these utilities: . # Send a notification to your phone directly with IFTTT (https://ifttt.com/) notifying # you when a training run ends or at the end of an epoch. notify({&#39;value1&#39;: &#39;Notification title&#39;, &#39;value2&#39;: &#39;Notification body&#39;}, key=[IFTTT_KEY]) # Automatically set random seeds for Python, numpy, and Pytorch to make sure your results can be reproduced seed_envirionment(42) # Print how much GPU memory is currently allocated gpu_usage(device, digits=4) # GPU Usage: 6.5 GB # Print out the number of parameters in a Pytorch model print(n_params(model)) # 150909673 # Save a model for a particular cross-validation fold to disk save_model(model, fold=0) . . Conclusion . . To learn more about PyTorch Zoo and its features, check out our Github repository. . The project is still a work in progress, so if you find a bug, think there is something missing, or have any suggestions for new features or modules, feel free to open an issue or a pull request. Feel free to use the library or code from it in your own projects, and if you feel that some code used in this project hasn‚Äôt been properly accredited, please open an issue. . . References . . https://arxiv.org/abs/1803.09820¬†&#8617; . | https://arxiv.org/abs/1709.01507¬†&#8617; . | https://arxiv.org/abs/1803.02579¬†&#8617; . |",
            "url": "https://bkkaggle.github.io/blog/ai/cross-posts/2020/04/30/pytorch-zoo.html",
            "relUrl": "/ai/cross-posts/2020/04/30/pytorch-zoo.html",
            "date": " ‚Ä¢ Apr 30, 2020"
        }
        
    
  
    
        ,"post12": {
            "title": "Perplexity",
            "content": "Updated on Aug 2, 2020: Add link to more resources . . Purpose . . The purpose of these series of blog posts is to be a place to store my (still in-progress!) notes about topics in learning, help me keep track of everything I‚Äôve learned over the last three years, and to practice my Latex skills. . This is my second blog post in the series, and this time I‚Äôm taking notes on evaluation metrics in NLP. . Most of the content of this post comes from Chip Huyen‚Äôs really good article in The Gradient on Evaluation methods for language models and the Deep Learning book, so a big thank you to the authors and editors for making this perplexing (pun intended) topic easy to understand. . let me be 100% clear here, I don‚Äôt want to come across like I‚Äôm taking someone else‚Äôs ideas and publishing them as my own. The purpose of this blog post is to take notes for myself so I can come back to this when I inevitably forget how to calculate perplexity. . Also, take a look at this for another good look at perplexity and the effect of tokenization on it. . . Background . . Language models like GPT2 try to predict the next word (or subword/character, we‚Äôll use the term token in this blog post), in a context of tokens. . For example, when predicting the next word in the sentence &quot;I am a computer science and machine learning&quot;, the probability of the next work being enthusiast could be represented by . P(enthusiast‚à£I¬†am¬†a¬†computer¬†science¬†and¬†machine¬†learning)P(enthusiast | I space am space a space computer space science space and space machine space learning)P(enthusiast‚à£I¬†am¬†a¬†computer¬†science¬†and¬†machine¬†learning) . The probability of a sentence $s$, where $s$ is a sequence of n tokens $(w_{0}, w_{1}, ‚Ä¶ w_{n})$ can be represented as . P(s)=‚àèi=1np(wi‚à£w1...wi‚àí1)P(s) = prod_{i = 1}^{n} p(w_i | w_1 ... w_{i-1})P(s)=i=1‚àèn‚Äãp(wi‚Äã‚à£w1‚Äã...wi‚àí1‚Äã) . expanded, it looks like this: . P(s)=p(w1)p(w2‚à£w1)p(w3‚à£w1,w2)...p(wn‚à£w1w2...wn‚àí1)P(s) = p(w_{1})p(w_{2} | w_{1})p(w_{3} | w_{1}, w_{2})...p(w_{n} | w_{1} w_{2} ... w_{n - 1})P(s)=p(w1‚Äã)p(w2‚Äã‚à£w1‚Äã)p(w3‚Äã‚à£w1‚Äã,w2‚Äã)...p(wn‚Äã‚à£w1‚Äãw2‚Äã...wn‚àí1‚Äã) . . Information Theory . . The amount of information given by a discrete event $x$ is calculated by the Self-Information equation 1 . I(x)=‚àílog¬†P(x)I(x) = -log space P(x)I(x)=‚àílog¬†P(x) . Information is normally written in one of two units, $nats$, in which case the logarithm has a base of $e$ or $bits$, with a base of $2$. . One $nat$ encodes the ‚Äúamount of information gained by observing an event with a probability of $ frac {1} {e}$.‚Äù 1 . . Shannon Entropy . . Shannon entropy is the extension of the Self-Information equation to probability distributions and is a way to ‚Äúquantify the amount of uncertainty in an entire probability distribution.‚Äù 1 . H(x)=Ex‚àºP[log¬†P(x)]H(x) = mathbb E_{x sim P} [log space P(x)]H(x)=Ex‚àºP‚Äã[log¬†P(x)] . It‚Äôs a measure of how much information, on average is produced for each letter of a language 2 and (if calculated in units of $bits$) can also be defined as the average number of binary digits required to encode each letter in a vocabulary. . In NLP, the evaluation metric, Bits-per-character (BPC), is really just the entropy of a sequence, calculated with units of bits instead of nats. . Entropy calculated across language models that are trained over different context lengths aren‚Äôt exactly comparable, LMs with a longer context len will have more information from which to predict the next token. For example, given the sentence I work with machine learning it should be easier for a LM to predict the next word in the sequence I work with machine, than with just the first word: I. (This is actually a major pain point when I was trying to reproduce gpt2‚Äôs ppl numbers on wikitext2 and wikitext103, it‚Äôs still unclear how the paper evaluated the ppl values on the tests sets for both datasets.) . . Perplexity . . Perplexity: A measurement of how well a probability distribution or probability model predicts a sample 3 . Perplexity is usually calculated with units of $nats$, so calculate it with the equation: $PPL = e^{loss}$ . . Dealing with different tokenization schemes . . If you want to convert the perplexity between models that have been trained using different tokenization schemes and have a different number of tokens that the LM can predict, multiply the cross-entropy loss of the first language model by the ratio of $( text{n tokens first model} / text{n tokens seconds model})$ . The adjusted perplexity value can be found with 4 : . adj_ppl=eloss‚àó(#tokens/#tokens¬†for¬†other¬†model)adj _ppl = e^{loss * ( text{ #tokens} / text{ #tokens for other model})}adj_ppl=eloss‚àó(#tokens/#tokens¬†for¬†other¬†model) . . References . . Chapter 3, Deep Learning, Ian Goodfellow, Yoshua Bengio and Aaron Courville, 2016, MIT Press¬†&#8617;¬†&#8617;2¬†&#8617;3 . | Claude E Shannon. Prediction and entropy of printed english. Bell system technical journal, 30(1):50‚Äì64, 1951.¬†&#8617; . | https://en.wikipedia.org/wiki/Perplexity¬†&#8617; . | https://github.com/NVIDIA/Megatron-LM/blob/master/evaluate_gpt2.py#L282¬†&#8617; . |",
            "url": "https://bkkaggle.github.io/blog/notes/2020/04/16/perplexity.html",
            "relUrl": "/notes/2020/04/16/perplexity.html",
            "date": " ‚Ä¢ Apr 16, 2020"
        }
        
    
  
    
        ,"post13": {
            "title": "Normalization",
            "content": "Updated on Jun 26, 2020: Fix BatchNorm and LayerNorm equations . . Purpose . . The purpose of these series of blog posts is to be a place to store my (still in-progress!) notes about topics in machine learning, help me keep track of everything I‚Äôve learned over the last three years, and to practice my Latex skills. . I‚Äôm starting this series of blog posts by writing down my notes on the different types of normalization in neural networks. Let‚Äôs see how this goes. . . Why normalize? . . Not normalizing input activations means that layers can transform activations to have very large or small means and standard deviations and cause the gradients to explode or vanish. . . Batch Normalization . . Arxiv . Tl;dr: Calculate the mean and standard deviation for each feature in the batch across the batch dimension and normalize to have a mean of $0$ and a standard deviation of $1$, then scale the resulting activations by two learned parameters $ gamma$ and $ beta$ . . For¬†a¬†mini-batch¬†of¬†activations¬†B={x1...xm}, text{For a mini-batch of activations} space B = { { x_{1} ... x_{m} } },For¬†a¬†mini-batch¬†of¬†activations¬†B={x1‚Äã...xm‚Äã}, . ŒºB‚Üê1m‚àëi=1mxi mu_{B} leftarrow frac{1} {m} sum_{i=1}^{m} x_{i}ŒºB‚Äã‚Üêm1‚Äãi=1‚àëm‚Äãxi‚Äã . œÉB2‚Üê1m‚àëi=1m(xi‚àíŒºB)2 sigma_{B}^{2} leftarrow frac{1} {m} sum_{i=1}^{m} (x_{i} - mu_{B}) ^ 2œÉB2‚Äã‚Üêm1‚Äãi=1‚àëm‚Äã(xi‚Äã‚àíŒºB‚Äã)2 . x^‚Üêxi‚àíŒºBœÉB2+œµ hat{x} leftarrow frac {x_{i} - mu_{B}} { sqrt { sigma_{B}^{2} + epsilon}}x^‚ÜêœÉB2‚Äã+œµ . ‚Äãxi‚Äã‚àíŒºB‚Äã‚Äã . yi‚ÜêŒ≥xi^+Œ≤y_{i} leftarrow gamma hat{x_{i}} + betayi‚Äã‚ÜêŒ≥xi‚Äã^‚Äã+Œ≤ . In Batch Normalization 1, you first calculate the mean and variance of the input tensor across the batch dimension, then subtract the input tensor by the mean $ mu_{B}$ and divide by the standard deviation (plus a small value to prevent dividing by $0$) $ sqrt { sigma_{B}^{2}}$ to restrict the activations of the neural network to having a mean of $0$ and a standard deviation of $1$ . You then scale the activations with learned parameters by rescaling the zero-mean activations by two learned parameters $ beta$ and $ gamma$. . The original paper claimed that the reason batch norm worked so well was by reducing internal covariate shift (‚ÄúThe change in the distribution of the input values to a learning algorithm‚Äù link), but more recent papers have disputed this and given other reasons to why it works so well. . This lets the network choose the mean and standard deviation that it wants for its activations before they are passed to a convolutional or fully connected layer. . One question that I‚Äôve had over and over again related to batch norm is where exactly to place it in a network, and it looks like other people have had the same question. . The original paper places the batch norm layer after the convolutional layer and before the non-linearity, which is the default used by torchvision and other model zoos. It also claims that using batch norm can reduce or eliminate the need to use dropout, so the order could look like either of these: . Conv‚ÜíBN‚ÜíReLU‚ÜíDropoutConv rightarrow BN rightarrow ReLU rightarrow DropoutConv‚ÜíBN‚ÜíReLU‚ÜíDropout . Conv‚ÜíBN‚ÜíReLUConv rightarrow BN rightarrow ReLUConv‚ÜíBN‚ÜíReLU . Some benchmarks show that placing the batch norm layer after the non-linearity can perform better 2 . Conv‚ÜíReLU‚ÜíBN‚ÜíDropoutConv rightarrow ReLU rightarrow BN rightarrow DropoutConv‚ÜíReLU‚ÜíBN‚ÜíDropout . but this isn‚Äôt widely used. . One major disadvantage with this is that the pre-normalized activations must be saved for the backwards pass. This means that if you add a batchnorm layer for each convolutional layer in your network (which is a common practice), your network will need about twice the memory to store the same batch size into the GPU. Beyond using up more GPU memory, batch norm doesn‚Äôt work with batch sizes of 1, and doesn‚Äôt perform well with small batch sizes since the calculated mean and standard deviation for each batch will change a lot from batch to batch and gives the model a very noisy estimate of the true distribution. . Another thing you should keep in mind about batch norm is that when training on multiple gpus or machines, that by default, each gpu will keep its own mean and standard deviation parameters, which can be a problem if the per-gpu batch size is too low. There are synchronized batch norm implementations available that should fix this. Another thing to keep in mind is what mean and standard deviation values to use when evaluating on a test set or finetuning on a new dataset. . Other work, like In-Place Batch normalization 3 reduces the memory usage by recomputing the pre-batchnorm activations from the post-batchnorm activations, while others, like Fixup Initialization 4, MetaInit 5, LSUV 6, and Delta Orthogonal 7 use special initialization strategies to remove the need for batch normalization. . . Layer normalization . . Arxiv . Tl;dr: Calculate the mean and standard deviation for element in the batch across the feature dimension and normalize to have a mean of $0$ and a standard deviation of $1$, then scale the resulting activations by two learned parameters $ gamma$ and $ beta$ . . For activations in a batch of shape $x_{ij}$, where $i$ is the batch dimension and $j$ is the feature dimension (assuming this is a simple feedforward network), . Œºi‚Üê1m‚àëj=1mxij mu_{i} leftarrow frac{1} {m} sum_{j=1}^{m} x_{ij}Œºi‚Äã‚Üêm1‚Äãj=1‚àëm‚Äãxij‚Äã . œÉi2‚Üê1m‚àëj=1m(xij‚àíŒºi)2 sigma_{i}^{2} leftarrow frac{1} {m} sum_{j=1}^{m} (x_{ij} - mu_{i}) ^ 2œÉi2‚Äã‚Üêm1‚Äãj=1‚àëm‚Äã(xij‚Äã‚àíŒºi‚Äã)2 . x^‚Üêxij‚àíŒºiœÉi2+œµ hat{x} leftarrow frac {x_{ij} - mu_{i}} { sqrt { sigma_{i}^{2} + epsilon}}x^‚ÜêœÉi2‚Äã+œµ . ‚Äãxij‚Äã‚àíŒºi‚Äã‚Äã . yij‚ÜêŒ≥xij^+Œ≤y_{ij} leftarrow gamma hat{x_{ij}} + betayij‚Äã‚ÜêŒ≥xij‚Äã^‚Äã+Œ≤ . Layer Normalization 8, is almost identical to batch normalization except that layer norm normalizes across the feature dimension instead of the batch dimension. This means that layer norm calculates a mean and standard deviation value for for each element in the batch instead of for each feature over all elements in the batch. . Layer norm is used mostly for RNNs and Transformers and has the same GPU memory requirements as batch norm. . . Resources . . These are some of the amazing and very helpful blog posts, tutorials, and deep dives that have helped me learn about the topic and write this blog post. . https://mlexplained.com/2018/11/30/an-overview-of-normalization-methods-in-deep-learning/ | https://github.com/pytorch/pytorch/issues/1959 | . . References . . https://arxiv.org/abs/1502.03167¬†&#8617; . | https://github.com/ducha-aiki/caffenet-benchmark/blob/master/batchnorm.md¬†&#8617; . | https://arxiv.org/abs/1712.02616¬†&#8617; . | https://arxiv.org/abs/1901.09321¬†&#8617; . | https://openreview.net/pdf?id=SyeO5BBeUr¬†&#8617; . | https://arxiv.org/abs/1511.06422¬†&#8617; . | https://arxiv.org/abs/1806.05393¬†&#8617; . | https://arxiv.org/abs/1607.06450¬†&#8617; . |",
            "url": "https://bkkaggle.github.io/blog/notes/2020/03/29/normalization.html",
            "relUrl": "/notes/2020/03/29/normalization.html",
            "date": " ‚Ä¢ Mar 29, 2020"
        }
        
    
  
    
        ,"post14": {
            "title": "What Is Ai",
            "content": "Google Doc . This was originally a report I made for my ELA class that I‚Äôve formatted into a blog post. Since I had to create the report in a specific way for the assignment, some of the information here has isn‚Äôt really relevant to most people who would be reading this blog post and is less technical. . Artificial Intelligence, or as it‚Äôs more commonly known, AI, has been said to either transform our world into a utopia, or bring about our doom. With so many widely publicized news stories about AI systems that can generate convincingly human-like text, defeat world champions at board games that were previously thought to be too hard for a computer, or generate images of human faces that appear indistinguishable from the real things, it can seem that we are close to a point at which AI may become self-aware and pose a threat to humans. . To truly understand if these fears of AI surpassing human intelligence and taking over the world are justified, we must first know, what is AI? . What is AI? What is AI? For some, it conjures up pictures from movies like Terminator and The Matrix, of robots gaining sentience and taking over the world. The term ‚ÄúArtificial Intelligence‚Äù was coined in 1956, by computer scientist John McCarthy, who, in his article, defines AI as ‚ÄúThe science and engineering of making intelligent machines, especially computer programs‚Äù 1. Other people define AI in similar terms, saying that ‚ÄúAI is a collection of methods and ideas for building software that can do some of the things that humans can do with their brains‚Äù 2. . What is the history of AI? The field of AI started in the years after the end of World War II. In 1947, the famous British mathematician and code-breaker Alan Turing gave a lecture on programming computers to develop intelligent machines 1. Turing was also the creator of the Turing test, a test to determine ‚Äúa machine‚Äôs ability to exhibit intelligent behavior similar to that of a human.‚Äù . In the 1960s, researchers at MIT developed a chatbot (a chatbot is a computer program that attempts to carry on a conversation with a human) called ELIZA which was able to pass the Turing test and show that it is possible for a computer program to create human-like text. . In the 1970s and 80s, neural networks, a family of algorithms that are loosely based on the neurons in a human brain, were developed. Neural networks excelled at learning patterns from large amounts of data and were used to automate tasks like reading addresses from envelopes. . In the 1990s and 2000s more progress was made in solving large problems in AI. In 1996, IBM‚Äôs Deep Blue computer beat the world‚Äôs best chess player, and in 2000, Honda released ASIMO, a humanoid robot that was capable of walking and recognizing objects and gestures. . In 2010, IBM‚Äôs Watson computer beat the best human competitors on the trivia game show Jeopardy!. Since around 2012, a lot of AI research is being done in machine learning - deep learning in particular. Deep learning involves stacking layers of neural networks on top of each other to create ‚Äúdeep‚Äù neural networks. Neural networks are now used in most of the widely used AI applications today - digital assistants like Siri and Alexa, self-driving cars, and recommendation algorithms from Netflix, Youtube, and other social media companies are all using neural networks in some part. Neural networks currently work better than other AI techniques in many areas because of their ability to learn from large amounts of data and because of the increasing amount of computational power available to train them 3 . . What are the different types of AI? AI is not one single area of research, it consists of many different branches that each have different views on how to build artificially intelligent systems. There are two main types of artificial intelligence, narrow AI and general AI. 2 . Most of the advances in AI have been in narrow AI: getting computers to learn how to do certain tasks as good as or better than a human. Although computers can now do certain tasks better than humans, narrow AI systems are highly specialized - a system designed for classifying images can‚Äôt be used to control a robot arm 2 . One example of a branch of narrow AI would be Machine Learning, or ML. Machine learning involves teaching a computer to iteratively learn to solve a task by giving it a large amount of data to learn from. In this way, machine learning lets computers learn how to do tasks without explicitly giving it instructions on how to do so 3 . . General AI involves computers that can generalize to a wide variety of tasks like humans do. So far, there has been very little progress on developing general AI, so any general AI systems are very likely decades away, if not more. 2 . In what areas is AI being used? AI is being used by researchers in a wide variety of areas and for a wide variety of purposes. AI is being used in healthcare to predict the spread of the Coronavirus epidemic, predict with radiologist-level accuracy whether a person has cancer from an x-ray scan, and to more accurately predict the folded structure of proteins, which is a crucial step in designing new life-saving medicines. . AI is also being used by companies in three main ways. First, AI is being used for RPA (Robotic Process Automation), automating time-consuming administrative tasks like transferring data from emails to spreadsheets and databases. Second, AI is being used to gain cognitive insights (which involves using algorithms to ‚Äúdetect patterns in vast volumes of data and interpret their meaning‚Äù) by predicting what items customers will buy next and identifying credit card fraud in real time. Finally, AI is being used for cognitive engagement (using AI to engage with potential customers) with chatbots providing customer service at any time and creating customized care plans. 4 . Conclusion Artificial intelligence today is limited to computers that can do certain tasks, sometimes as good as or even better than what a human could do, but highly specialized and limited to the scope of the task that it was trained to do. Once one knows the limitations of AI as we have it today, the claims that AI is close to surpassing human intelligence and taking over the world seem unfounded. . Footnotes . http://jmc.stanford.edu/articles/whatisai/whatisai.pdf¬†&#8617;¬†&#8617;2 . | https://www.skynettoday.com/editorials/ai-coverage-best-practices¬†&#8617;¬†&#8617;2¬†&#8617;3¬†&#8617;4 . | https://blogs.nvidia.com/blog/2016/07/29/whats-difference-artificial-intelligence-machine-learning-deep-learning-ai/¬†&#8617;¬†&#8617;2 . | Davenport, Thomas H and Ronanki, Rajeev. ‚ÄúArtificial Intelligence for the real world.‚Äù Harvard Business Review. January-February 2018: Pages 110 and 112¬†&#8617; . |",
            "url": "https://bkkaggle.github.io/blog/ai/non-technical/2020/03/22/what-is-ai.html",
            "relUrl": "/ai/non-technical/2020/03/22/what-is-ai.html",
            "date": " ‚Ä¢ Mar 22, 2020"
        }
        
    
  
    
        ,"post15": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.‚Ü© . 2. This is the other footnote. You can even have a link!‚Ü© .",
            "url": "https://bkkaggle.github.io/blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " ‚Ä¢ Feb 20, 2020"
        }
        
    
  
    
        ,"post16": {
            "title": "Template",
            "content": "",
            "url": "https://bkkaggle.github.io/blog/2020/01/14/template.html",
            "relUrl": "/2020/01/14/template.html",
            "date": " ‚Ä¢ Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Check out my website for more about me. .",
          "url": "https://bkkaggle.github.io/blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
      ,"page7": {
          "title": "/Uses",
          "content": "Desk . I have a 75cm Ikea LINNMON table top+legs which is pretty nice and large but I‚Äôd recommend anyone to get a stronger set of table legs since mine could be sturdier. I have two Ikea TERTIAL desk lamps that I use with two 1200 lumen 5000K bulbs which are pretty bright and simulate daylight pretty well, which is especially helpful during the winter. I sit on a Ikea J√ÑRVFJ√ÑLLET ergonomic chair. I‚Äôd really recommend this chair for anyone who doesn‚Äôt want to go for a herman miller but still wants a chair that‚Äôs comfortable to sit on for many, many hours. . I use the 13‚Äù 2019 macbook pro along with a 32‚Äù Samsung UJ590 4K monitor and a 27‚Äù LG 27MP58VQ-P 1080p monitor. I used to use the 27‚Äù one full time until I got the second monitor so i know just keep this one off to the side to hold extra chrome tabs/arxiv papers/discord. I bought an ipad with the apple pencil for school (thanks academic readiness bursary) because I eventually wore down my old surface pro 3‚Äôs pen nib until it just stopped working. The ipad was a really good ~freebie~investment for working on math assignments but I‚Äôve mostly moved over to latex for most of my assignments now. I still use my iphone x which was one of the last iphones to still have force touch, which was imo a really underrated feature that I wouldn‚Äôt want to give up. and ofc, I got all my apple gadgets in matching space gray. . I have a really nice pair of ANC headphones that I use all the time as well as a pair of Anker bluetooth earbuds that I occasionally use on the go. I use a wireless charger for my phone as well as a usb-c hub with pass through charging for connecting to my monitors and chargin everything at the same time. . Apps . I use chrome for browsing the web, vscode as my main editor, and iterm2 as my preferred terminal emulator. I use the pocket extension on chrome and my phone to save any interesting articles to read through later, and feedly for keeping up the RSS feeds of blogs that I like to follow. I mostly use discord to keep in touch with friends, figma to mockup designs and make memes, and I have the procreate app, even though I‚Äôve almost never used it. . Vscode . I use vscode with the following plugins that I find helpful: . Github dark theme | Discord presence | Latex Workshop | Prettier code formatting | Pylance python language server | Rust Analyzer | Settings Sync | . Dev . I use nightly Rust, the latest version of Node through nvm, Python 3.9 through miniconda, and Latex through MacTex and homebrew. I also recently set up a nice vim configuration with almost all the features that I would have had through vscode, which is nice when I just want to edit something in the terminal or when I‚Äôm working on a remote machine through ssh. I use CoC for autocompletion with the following language server plugins: coc-tsserver coc-json coc-html coc-css coc-clangd coc-rust-analyzer coc-latex coc-python. . Misc . I‚Äôve remaped my caps-lock key to esc since my mac doesn‚Äôt have a physical escape key which is still in a pretty awkward place to reach. I use the JetBrains mono font so I can make use of ligatures when coding, and I‚Äôve configured my terminal to let me authenticate commands like sudo with touchid. I use a 4k version of the firewatch wallpaper on all my devices. . .",
          "url": "https://bkkaggle.github.io/blog/uses/",
          "relUrl": "/uses/",
          "date": ""
      }
      
  

  
  

  
  

  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ ‚Äúsitemap.xml‚Äù | absolute_url }} | .",
          "url": "https://bkkaggle.github.io/blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}